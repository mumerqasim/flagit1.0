
const db = [
    {
        id:"M&A",
        info:{
            name: "M&A Custom",
            group: "client",
            id:"M&A"
        },
        imports: {
            excel: `proc import datafile=filepath\nout=sample_import\ndbms=excel\nreplace;\ngetnames=Yes;\nsheet='Sheet 1';\nrun;\n\n`,
            csv:`proc import datafile=filepath\nout=sample_import\ndbms=csv\nreplace;\ngetnames=Yes;\nsheet='Sheet 1';\nrun;\n\n`,
            text: `proc import datafile=filepath\nout=sample_import\ndbms=text\nreplace;\ngetnames=Yes;\nsheet='Sheet 1';\nrun;\n\n`,
            dbf: `proc import datafile=filepath\nout=sample_import\ndbms=dbf\nreplace;\ngetnames=Yes;\nsheet='Sheet 1';\nrun;\n\n`,
            sav:`proc import datafile=filepath\nout=sample_import\ndbms=sav\nreplace;\ngetnames=Yes;\nsheet='Sheet 1';\nrun;\n\n`
        },
        flagging: {
            codes: {
                codeInitials:`data sample_processing;\nset sample_import;\n\n`,
                standardCodes:`firstname=First_Name;\nlastname=Last_Name;\n\nemail='rf@rf.com';\n\ntoken=compress(UID,'{}-',' ');\n\nphonef=Phone;\n\nphonetypef=Phone_Type;\n\nclusterf='';\n\ngenderf=3;\nif Gender ='M' then genderf=1;\nif Gender ='F' then genderf=2;\nif Gender ='U' then genderf=3;\n\nagef=7;\nIF 18<=AGE<=29 THEN agef=1;\nIF 30<=AGE<=40 THEN agef=2;\nIF 41<=AGE<=55 THEN agef=3;\nIF 56<=AGE<=65 THEN agef=4;\nIF 66<=AGE<=75 THEN agef=5;\nIF 76<=AGE<=200 THEN agef=6;\n\npartyf=2;\nif Party ='Republican' then partyf=1;\n\nethnicityf=6;\nif Race='White' then ethnicityf=1;\nif Race='Black' then ethnicityf=2;\nif Race='Hispanic' then ethnicityf=3;\nif Race='Asian' then ethnicityf=4;\nif Race='Other' then ethnicityf=5;\n\nmodef='';\nsampletype='';\nadditionalsample='';\n\nregionf=AREA_1;\n\nplaceholder1='';\nplaceholder2='';\nplaceholder3='';\n\n`,
                codeLasts:`run;`,
                
            },
            retain: {
                retainInitials:`data sample_processing;\nRetain`,
                standardVariables:`firstname lastname email token phonef phonetypef clusterf genderf agef partyf ethnicityf modef sampletype additionalsample regionf placeholder1 placeholder2 placeholder3`,
                retainLasts:`set sample_processing;\nrun;\n`,
            }
        },
        scrubbing: {
            filePath:`proc import datafile=filepath\nout=scrublist\ndbms=excel\nreplace;\ngetnames=Yes;\nsheet='Sheet1';\nmixed=Yes;\nscantext=Yes;\nrun;\n\n`,
            middle:`proc sort data=sample_processing \nout=sample_processing \nnodupkey \ndupout=tokendupsdeleted;\nby token;\nrun;\n \n\ndata sample_processing; set sample_processing;\n    full_nameKGS=upcase(compress(catx('', firstname, lastname)));\nrun;\n \n\nproc SQL;\n\ncreate table name as\nselect * from sample_processing where full_nameKGS not in (select fullname from scrublist);\n\ncreate table exactname as\nselect * from sample_processing where full_nameKGS in (select fullname from scrublist);\n\n\ncreate table name2 as \nselect * from name where trimn(cats(phonef)) not in (select trimn(cats(number)) from  scrublist);\n\ncreate table PhoneDNC as \nselect * from name where trimn(cats(phonef)) in (select trimn(cats(number)) from  scrublist);\n\ncreate table name3 as \nselect * from name2 where full_nameKGS not in (select dnc from  scrublist);\n\ncreate table DNCNAMES as \nselect * from name2 where full_nameKGS in (select dnc from  scrublist);\n\nquit;\n\n\ndata name4; set name3;\nlastname1=UPCASE(trimn(lastname));\nrun;\n\n`,
            names:`proc sql;\ncreate table name1 as\nselect * from name4 where lastname1 not in \n(namelist);\n\ncreate table Lastnameremoved as \nselect * from Name4 where lastname1 in \n(namelist);\nquit;\n\n`
        },
        splitting: {
            standard:{
                email:`* Standard Email Splitting Codes;\n\n`,
                phone:`Proc sort data=name1 \nout=Phone \nnodupkey \ndupout=drop_dupphone;\nby phonef;\n\ndata Phone; set Phone;\nModef=1;\nRandomKGS=ranuni(123456789);\nrun;\n \nproc sort data=Phone;\nby RandomKGS;\nrun;\n \n\ndata Phone; set Phone;\ndrop full_nameKGS RandomKGS lastname1;\nrun;\n\n`,
                text:`proc sort data=Phone(where=(phonetypef = 2)) \nout=text nodupkey dupout=drop_duptextphone;\nby phonef;\nrun;\n\ndata Text;\nLength firstname lastname email token $ 100;\nset Text;\nmodef=3;\ntoken=cats("T",token);\nRandomKGS=ranuni(123456789);\nrun;\n\nproc sort data=Text;\nby RandomKGS;\nrun;\n\n\ndata Text; set Text;\ndrop RandomKGS;\nrun;\n\n`,
                eToP:`* Standard Email to Phone Splitting Codes;\n\n`,
                pToT:`* Standard Phone to Text Splitting Codes;\n\n`
            },
            ssbased:{
                email:`* Sample Source Based Email Splitting Codes;\n\n`,
                phone:`* Sample Source Based Phone Splitting Codes;\n\n`,
                text:`* Sample Source Based Text Splitting Codes;\n\n`,
                eToP:`* Sample Source Based Email to Phone Splitting Codes;\n\n`,
                pToT:`* Sample Source Based Phone to Text Splitting Codes;\n\n`
            },
            splittingLasts:`proc sql;\nselect memname,nlobS\nfrom dictionary.tables\nwhere libname='WORK'\n and memname IN ("LASTNAMEREMOVED" , "EXACTNAME" , "DROP_DUPPHONE" , "DROP_DUPTEXTPHONE", "TOKENDUPSDELETED",\n"TOKENDUPS_FROM_ORIGINAL","PHONEDUPS_FROM_ORIGINAL","TOKENDUPS_FROM_ORIGINAL_TEXT","PHONEDUPS_FROM_ORIGINAL_TEXT","PHONEDNC","DNCNAMES");\nquit;\n\n`,
            exports: {
                email:`PROC EXPORT data=Email\noutfile="folderpath\Email Sample.csv"\ndbms=CSV;\nrun;\n\n`,
                phone:`PROC EXPORT data=Phone\noutfile="folderpath\Phone Sample.csv"\ndbms=CSV;\nrun;\n\n`,
                text:`PROC EXPORT data=Text\noutfile="folderpath\Text Sample.csv"\ndbms=CSV;\nrun;\n\n`,
                eToP:`PROC EXPORT data=EmailToPhone\noutfile="folderpath\EmailToPhone Sample.csv"\ndbms=CSV;\nrun;\n\n`,
                pToT:`PROC EXPORT data=PhoneToText\noutfile="folderpath\PhoneToText Sample.csv"\ndbms=CSV;\nrun;\n\n`,
            }
        },
        frequencies:{
            freqProcInitials:`ods CSV file="folderpath\sample frequencies.CSV";\n\n`,
            freqCodeInitials:`proc freq data=phone;\nTables `,
            freqCodeLasts:`\nrun;\n`,
            freqProcLasts:`ods CSV close;\n\n`,
        },
        trello:{
            trelloInitials:`proc sql;\ntitle 'Cell %';\nselect ROUND(count(phonetypef)/(select count(*)\nfrom phone\nwhere phonetypef <>3)*100) as Percent\nfrom phone\nwhere phonetypef=2;\n\n`,
            email:`create table emails as\nselect count(*) as Records, 'Email' as Sample, ROUND(count(*)/emailNsize) as Ratio\nfrom email;\n\n`,
            phone:`create table phones as\nselect count(*) as Records, 'Phone' as Sample, ROUND(count(*)/phoneNsize) as Ratio\nfrom phone;\n\n`,
            text:`create table texts as\nselect count(*) as Records, 'Text' as Sample, ROUND(count(*)/textNsize) as Ratio\nfrom text;\n\n`,
            eToP:`create table emailtophones as\nselect count(*) as Records, 'Email To Phone' as Sample, ROUND(count(*)/eToPNsize) as Ratio\nfrom emailtophone;\n\n`,
            pToT:`create table phonetotexts as\nselect count(*) as Records, 'Phone To Text' as Sample, ROUND(count(*)/pToTNsize) as Ratio\nfrom phonetotext;\n\n`,
            trelloMiddle:`data SampleRecords;\nset `,
            trelloLasts: `;\nrun;\n\nproc print data=SampleRecords;\ntitle "Sample Records";\n    Var Sample /style={fontweight=bold};\n    Var Records;\n    Var Ratio;\nrun;\n\n`,
            language:`proc format ;\nvalue lan 1='English' \n2='Spanish';\n\nvalue eth 1='White' \n2='Black' \n3='Hispanic' \n4='Asian'\n5='Other';\nrun;\n\nproc freq data=phone(rename=(languagef='Language'n)) ;\ntitle 'Language Records';\nTable 'Language'n/nocum;\nformat 'Language'n lan. ;\nrun;\n\nproc freq data=phone(rename=(ethnicityf='Ethnicity'n)) ;\ntitle 'Ethnicity Records';\nTable 'Ethnicity'n/nocum;\nformat 'Ethnicity'n eth. ;\nrun;\n\n`,
            os:`proc sql;\ncreate table overall as\nselect count(*) as Records, 'Overall' as Sample, ROUND(count(*)/Nsize) as Ratio\nfrom phone;\n\nproc sql;\ncreate table base as\nselect count(*) as Records, 'Base' as Sample, ROUND(count(*)/Nsizebase) as Ratio\nfrom phone\nwhere sampletype=1;\n\nproc sql;\ncreate table os as\nselect count(*) as Records, 'OS' as Sample, ROUND(count(*)/Nsizeos) as Ratio\nfrom phone\nwhere sampletype=2;\n\ndata Sampletype_Records;\nset overall base os;\n\nproc print data=Sampletype_Records;\ntitle "Sampletype Records";\nVar Sample /style={fontweight=bold};\nVar Records;\nVar Ratio;\nrun;\n\n/* Counts per sample */\n\nproc sql;\ncreate table phoneB as\nselect count(*) as Records, 'PhoneBase' as Sample\nfrom phone\nwhere sampletype=1;\n\nproc sql;\ncreate table textB as\nselect count(*) as Records, 'TextBase' as Sample\nfrom text\nwhere sampletype=1;\n\nproc sql;\ncreate table phoneOS as\nselect count(*) as Records, 'PhoneOS' as Sample\nfrom phone\nwhere sampletype=2;\n\nproc sql;\ncreate table textOS as\nselect count(*) as Records, 'TextOS' as Sample\nfrom text\nwhere sampletype=2;\n\ndata SampleRecords;\nset phoneB textB phoneOS textOS;\n\nproc print data=SampleRecords;\ntitle "Sample Records";\nVar Sample /style={fontweight=bold};\nVar Records;\nrun;\n\n`
        },
        checking:{
            preFlagCheck:`data phonesample; set phone;\ndata textsample; set text;\n\ndata phonesample; \nset phonesample;\nPhoneflag="Incorrect";\nif phonef = phone then Phoneflag="Correct";\n\nproc sql;\ncreate table PhoneFlagcheck as\nselect distinct Phoneflag,'Phone flag check for Phone sample' as Checks,\ncase\nwhen Phoneflag = "Correct" then 'Correct'\nEnd as Correct, case\nwhen Phoneflag = "Incorrect" then 'Incorrect'\nEnd as Incorrect\nfrom phonesample;\nquit;\n\nProc format; \nValue $TFColor\n"Correct"=Green\n"Incorrect"=Red;\nrun;\n\nProc print data=PhoneFlagCheck;\nVar Phoneflag / style = {fontweight=bold Color=$TFColor.};\nrun;\n\n`,
            postFlagCheck:`proc sql;\n\ntitle 'Phonetype Flag';\nselect distinct(Phone_Type),phonetypef from phonesample\ngroup by Phone_Type, phonetypef\nORDER BY phonetypef;\n\ntitle 'Gender Flag';\nselect distinct(Gender),genderf from phonesample\ngroup by Gender, genderf\nORDER BY genderf;\n\ntitle 'Age Flag';\nselect distinct agef,\nmin(Age) as Min_Age,\nmax(Age) as max_Age\nfrom phonesample\ngroup by agef;\n\ntitle 'Party flag';\nselect distinct(party),partyf from phonesample\ngroup by party, partyf\nORDER BY partyf;\n\ntitle 'Ethnicity flag';\nselect distinct(Race),ethnicityf from phonesample\ngroup by Race, ethnicityf\nORDER BY ethnicityf;\n\ntitle 'Region Flag';\nselect distinct(Area),regionf from phonesample\ngroup by Area, regionf\nORDER BY regionf;\n\nquit;\n\n/* Headers Checking codes*/\n\nproc contents Data=phonesample Noprint Out= OG_Variablename VARNUM;\nrun;\n\nProc sort data= OG_Variablename out=Variablecheck (Keep= NAME VARNUM);\nby VARNUM;\nwhere VARNUM <= 18;\nrun;\n\ndata headers;\ninput @1 Precodes $ 1-16 @17  VARNUM;\ndatalines;\nfirstname        1\nlastname         2\nemail            3\ntoken            4\nphonef           5\nphonetypef       6\nClusterF         7\ngenderf          8\nagef             9\npartyf           10\nethnicityf       11\nmodef            12\nsampletype       13\nadditionalsample 14\nregionf    	 	 15\nplaceholder1 	 16\nplaceholder2 	 17\nplaceholder3	 18\n;\nrun;\n\nData Headerscheck; \nMerge Headers Variablecheck;\nby VARNUM;\nrun;\n\nData Finalheadercheck; \nset Headerscheck;\nVariable_name_check="Incorrect";\nif Precodes=Name then Variable_name_check="Correct";\n\nProc format; \nValue $TFColor\n"Correct"=Green\n"Incorrect"=Red;\nrun;\n\nProc print data=Finalheadercheck;\ntitle "Please check if flag orders align";\nVar Precodes VARNUM Name;\nVar Variable_name_check / style = {fontweight=bold Color=$TFColor.};\nrun;\n\n/* Checks for Phone sample*/\n\nproc sql;\ncreate table Modecheck as\nselect distinct Modef,'Mode check for Phone sample' as Checks,\ncase\nwhen Modef = "1" then 'Correct'\nEnd as Correct, case\nwhen Modef NE "1" then 'Incorrect'\nEnd as Incorrect\nfrom phonesample;\nquit;\n\nproc sql;\ncreate table Clustercheck as\nselect distinct Clusterf,'Cluster check for Phone sample' as Checks,\ncase\nwhen Clusterf = "" then 'Correct'\nEnd as Correct, case\nwhen Clusterf NE "" then 'Incorrect'\nEnd as Incorrect\nfrom phonesample;\nquit;\n\nproc sql;\ncreate table Emailcheck as\nselect distinct email,'Email check for Phone sample' as Checks,\ncase\nwhen email = "rf@rf.com" then 'Correct'\nEnd as Correct, case\nwhen email NE "rf@rf.com" then 'Incorrect'\nEnd as Incorrect\nfrom phonesample;\nquit;\n\n/* Code to look at unique Phones in sample*/\n\nPROC SQL print; \nCreate table TotalPhone as  \nSELECT count(phonef) AS Total_Phone \nFROM phonesample;\nQUIT;\n\nPROC SQL print; \nCreate table DistinctPhones as\nSELECT count(distinct phone) AS distinct_Phone \nFROM phonesample;\nQUIT;\n\nPROC SQL print; \nCreate table TotalToken as  \nSELECT count(Token) AS Total_Token \nFROM phonesample;\nQUIT;\n\nPROC SQL print; \nCreate table DistinctToken as\nSELECT count(distinct Token) AS distinct_Token \nFROM phonesample;\nQUIT;\n\nData Phonechecks;\nset TotalPhone; set DistinctPhones;\nrun;\n\nData Phonecheks1;\nSet Phonechecks;\n\nif Total_Phone = Distinct_Phone then Correct = "Correct";\nif Total_Phone ~= Distinct_Phone then Incorrect = "Incorrect";\nChecks="Unique Phone Check for Phone sample";\nrun;\n\nData Tokenchecks;\nset TotalToken; set DistinctToken;\nrun;\n\nData Tokencheks1;\nSet Tokenchecks;\n\nif Total_Token = Distinct_Token then Correct = "Correct";\nif Total_Token ~= Distinct_Token then Incorrect = "Incorrect";\nChecks="Unique Token Check for Phone sample";\nrun;\n\nData Mergecheck; \nset Modecheck Clustercheck emailcheck Phonecheks1 Tokencheks1;\nrun;\n\nProc format; \nValue $TFColor\n"Correct"=Green\n"Incorrect"=Red;\nrun;\n\nProc print data=Mergecheck;\ntitle "Status of all the checks required for Phone sample";\nVar Checks / style = {fontweight=bold};\nVar Correct / Style = {fontweight=bold Color=$TFColor.};\nVar Incorrect / Style = {fontweight=bold Color=$TFColor.}; \nrun;\n\n/* Checks for Text Sample*/\n\nproc sql;\ncreate table Modecheck as\nselect distinct Modef,'Mode check for Text sample' as Checks,\ncase\nwhen Modef = "3" then 'Correct'\nEnd as Correct, case\nwhen Modef NE "3" then 'Incorrect'\nEnd as Incorrect\nfrom textsample;\nquit;\n\nproc sql;\ncreate table Clustercheck as\nselect distinct Clusterf,'Cluster check for Text sample' as Checks,\ncase\nwhen Clusterf = "" then 'Correct'\nEnd as Correct, case\nwhen Clusterf NE "" then 'Incorrect'\nEnd as Incorrect\nfrom textsample;\nquit;\n\nproc sql;\ncreate table Emailcheck as\nselect distinct email,'Email check for Text sample' as Checks,\ncase\nwhen email = "rf@rf.com" then 'Correct'\nEnd as Correct, case\nwhen email NE "rf@rf.com" then 'Incorrect'\nEnd as Incorrect\nfrom textsample;\nquit;\n\nData textsample; Set textsample;\nToken_Check="Incorrect";\nif substr(Token,1,1)="T" then Token_Check="Correct";\nrun;\n\nproc sql;\ncreate table TokenCheck as\nselect distinct Token_Check, '"T" in token check for Text sample' as Checks,\ncase \nwhen Token_Check = "Correct" then "Correct"\nend as Correct, Case\nwhen Token_Check = "Incorrect" then "Incorrect"\nend as Incorrect\nfrom textsample;\nquit;\n\n/* Code to look at unique Phones in Phone/Token in Textsample*/\n\nPROC SQL print; \nCreate table TotalPhone as  \nSELECT count(phonef) AS Total_Phone \nFROM textsample;\nQUIT;\n\nPROC SQL print; \nCreate table DistinctPhones as\nSELECT count(distinct phone) AS distinct_Phone \nFROM textsample;\nQUIT;\n\nData Phonechecks1;\nset TotalPhone; set DistinctPhones;\nrun;\n\nData Phonecheks1;\nSet Phonechecks1;\n\nif Total_Phone = Distinct_Phone then Correct = "Correct";\nif Total_Phone ~= Distinct_Phone then Incorrect = "Incorrect";\nChecks="Unique Phone Check for Text sample";\nrun;\n\nPROC SQL print; \nCreate table TotalToken as  \nSELECT count(token) AS Total_Token \nFROM textsample;\nQUIT;\n\nPROC SQL print; \nCreate table DistinctToken as\nSELECT count(distinct Token) AS distinct_Token \nFROM textsample;\nQUIT;\n\nData Tokenchecks1;\nset TotalToken; set DistinctToken;\nrun;\n\nData Tokencheks1;\nSet Tokenchecks1;\n\nif Total_Token = Distinct_Token then Correct = "Correct";\nif Total_Token ~= Distinct_Token then Incorrect = "Incorrect";\nChecks="Unique Token Check for Text sample";\nrun;\n\nData Mergecheck; \nset Modecheck Clustercheck EmailCheck TokenCheck Tokencheks1 Phonecheks1;\nrun;\n\nProc format; \nValue $TFColor\n"Correct"=Green\n"Incorrect"=Red;\nrun;\n\nProc print data=Mergecheck;\ntitle "Status of all the checks required for Text sample";\nVar Checks / style = {fontweight=bold};\nVar Correct / Style = {fontweight=bold Color=$TFColor.};\nVar Incorrect / Style = {fontweight=bold Color=$TFColor.}; \nrun;`
        }
    },
    {
        id:"GS",
        info:{
            name: "GS",
            group: "client",
            id:"GS"
        },
        imports: {
            excel: `proc import datafile=filepath\nout=sample_import\ndbms=excel\nreplace;\ngetnames=Yes;\nsheet='Sheet 1';\nrun;`,
            csv:`proc import datafile=filepath\nout=sample_import\ndbms=csv\nreplace;\ngetnames=Yes;\nsheet='Sheet 1';\nrun;`,
            text: `proc import datafile=filepath\nout=sample_import\ndbms=text\nreplace;\ngetnames=Yes;\nsheet='Sheet 1';\nrun;`,
            dbf: `proc import datafile=filepath\nout=sample_import\ndbms=dbf\nreplace;\ngetnames=Yes;\nsheet='Sheet 1';\nrun;`,
            sav:`proc import datafile=filepath\nout=sample_import\ndbms=sav\nreplace;\ngetnames=Yes;\nsheet='Sheet 1';\nrun;`
        },
        flagging: {
            codes: {
                codeInitials:`data sample_processing;\nset sample_import;\n\n`,
                standardCodes:`firstname=First_Name;\nlastname=Last_Name;\n\nemail='rf@rf.com';\n\ntoken=compress(UID,'{}-',' ');\n\nphonef=Phone;\n\nphonetypef=Phone_Type;\n\nclusterf='';\n\ngenderf=3;\nif Gender ='M' then genderf=1;\nif Gender ='F' then genderf=2;\nif Gender ='U' then genderf=3;\n\nagef=7;\nIF 18<=AGE<=29 THEN agef=1;\nIF 30<=AGE<=40 THEN agef=2;\nIF 41<=AGE<=55 THEN agef=3;\nIF 56<=AGE<=65 THEN agef=4;\nIF 66<=AGE<=75 THEN agef=5;\nIF 76<=AGE<=200 THEN agef=6;\n\npartyf=2;\nif Party ='Republican' then partyf=1;\n\nethnicityf=6;\nif Race='White' then ethnicityf=1;\nif Race='Black' then ethnicityf=2;\nif Race='Hispanic' then ethnicityf=3;\nif Race='Asian' then ethnicityf=4;\nif Race='Other' then ethnicityf=5;\n\nmodef='';\nsampletype='';\nadditionalsample='';\n\nregionf=AREA_1;\n\nplaceholder1='';\nplaceholder2='';\nplaceholder3='';\n\n`,
                codeLasts:`run;`,
                
            },
            retain: {
                retainInitials:`data sample_processing;\nRetain`,
                standardVariables:`firstname lastname email token phonef phonetypef clusterf genderf agef partyf ethnicityf modef sampletype additionalsample regionf placeholder1 placeholder2 placeholder3`,
                retainLasts:`set sample_processing;\nrun;\n`,
            }
        },
        scrubbing: {
            filePath:`proc import datafile=filepath\nout=scrublist\ndbms=excel\nreplace;\ngetnames=Yes;\nsheet='Sheet1';\nmixed=Yes;\nscantext=Yes;\nrun;\n\n`,
            middle:`proc sort data=sample_processing \nout=sample_processing \nnodupkey \ndupout=tokendupsdeleted;\nby token;\nrun;\n \n\ndata sample_processing; set sample_processing;\n    full_nameKGS=upcase(compress(catx('', firstname, lastname)));\nrun;\n \n\nproc SQL;\n\ncreate table name as\nselect * from sample_processing where full_nameKGS not in (select fullname from scrublist);\n\ncreate table exactname as\nselect * from sample_processing where full_nameKGS in (select fullname from scrublist);\n\n\ncreate table name2 as \nselect * from name where trimn(cats(phonef)) not in (select trimn(cats(number)) from  scrublist);\n\ncreate table PhoneDNC as \nselect * from name where trimn(cats(phonef)) in (select trimn(cats(number)) from  scrublist);\n\ncreate table name3 as \nselect * from name2 where full_nameKGS not in (select dnc from  scrublist);\n\ncreate table DNCNAMES as \nselect * from name2 where full_nameKGS in (select dnc from  scrublist);\n\nquit;\n\n\ndata name4; set name3;\nlastname1=UPCASE(trimn(lastname));\nrun;\n\n`,
            names:`proc sql;\ncreate table name1 as\nselect * from name4 where lastname1 not in \n(namelist);\n\ncreate table Lastnameremoved as \nselect * from Name4 where lastname1 in \n(namelist);\nquit;\n\n`
        },
        splitting: {
            standard:{
                email:`* Standard Email Splitting Codes;\n\n`,
                phone:`Proc sort data=name1 \nout=Phone \nnodupkey \ndupout=drop_dupphone;\nby phonef;\n\ndata Phone; set Phone;\nModef=1;\nRandomKGS=ranuni(123456789);\nrun;\n \nproc sort data=Phone;\nby RandomKGS;\nrun;\n \n\ndata Phone; set Phone;\ndrop full_nameKGS RandomKGS lastname1;\nrun;\n\n`,
                text:`proc sort data=Phone(where=(phonetypef = 2)) \nout=text nodupkey dupout=drop_duptextphone;\nby phonef;\nrun;\n\ndata Text;\nLength firstname lastname email token $ 100;\nset Text;\nmodef=3;\ntoken=cats("T",token);\nRandomKGS=ranuni(123456789);\nrun;\n\nproc sort data=Text;\nby RandomKGS;\nrun;\n\n\ndata Text; set Text;\ndrop RandomKGS;\nrun;\n\n`,
                eToP:`* Standard Email to Phone Splitting Codes;\n\n`,
                pToT:`* Standard Phone to Text Splitting Codes;\n\n`
            },
            ssbased:{
                email:`* Sample Source Based Email Splitting Codes;\n\n`,
                phone:`* Sample Source Based Phone Splitting Codes;\n\n`,
                text:`* Sample Source Based Text Splitting Codes;\n\n`,
                eToP:`* Sample Source Based Email to Phone Splitting Codes;\n\n`,
                pToT:`* Sample Source Based Phone to Text Splitting Codes;\n\n`
            },
            splittingLasts:`proc sql;\nselect memname,nlobS\nfrom dictionary.tables\nwhere libname='WORK'\n and memname IN ("LASTNAMEREMOVED" , "EXACTNAME" , "DROP_DUPPHONE" , "DROP_DUPTEXTPHONE", "TOKENDUPSDELETED",\n"TOKENDUPS_FROM_ORIGINAL","PHONEDUPS_FROM_ORIGINAL","TOKENDUPS_FROM_ORIGINAL_TEXT","PHONEDUPS_FROM_ORIGINAL_TEXT","PHONEDNC","DNCNAMES");\nquit;\n\n`,
            exports: {
                email:`PROC EXPORT data=Email\noutfile="folderpath\Email Sample.csv"\ndbms=CSV;\nrun;\n\n`,
                phone:`PROC EXPORT data=Phone\noutfile="folderpath\Phone Sample.csv"\ndbms=CSV;\nrun;\n\n`,
                text:`PROC EXPORT data=Text\noutfile="folderpath\Text Sample.csv"\ndbms=CSV;\nrun;\n\n`,
                eToP:`PROC EXPORT data=EmailToPhone\noutfile="folderpath\EmailToPhone Sample.csv"\ndbms=CSV;\nrun;\n\n`,
                pToT:`PROC EXPORT data=PhoneToText\noutfile="folderpath\PhoneToText Sample.csv"\ndbms=CSV;\nrun;\n\n`,
            }
        },
        frequencies:{
            freqProcInitials:`ods CSV file="folderpath\sample frequencies.CSV";\n\n`,
            freqCodeInitials:`proc freq data=phone;\nTables `,
            freqCodeLasts:`\nrun;\n`,
            freqProcLasts:`ods CSV close;\n\n`,
        },
        trello:{
            trelloInitials:`proc sql;\ntitle 'Cell %';\nselect ROUND(count(phonetypef)/(select count(*)\nfrom phone\nwhere phonetypef <>3)*100) as Percent\nfrom phone\nwhere phonetypef=2;\n\n`,
            email:`create table emails as\nselect count(*) as Records, 'Email' as Sample, ROUND(count(*)/emailNsize) as Ratio\nfrom email;\n\n`,
            phone:`create table phones as\nselect count(*) as Records, 'Phone' as Sample, ROUND(count(*)/phoneNsize) as Ratio\nfrom phone;\n\n`,
            text:`create table texts as\nselect count(*) as Records, 'Text' as Sample, ROUND(count(*)/textNsize) as Ratio\nfrom text;\n\n`,
            eToP:`create table emailtophones as\nselect count(*) as Records, 'Email To Phone' as Sample, ROUND(count(*)/eToPNsize) as Ratio\nfrom emailtophone;\n\n`,
            pToT:`create table phonetotexts as\nselect count(*) as Records, 'Phone To Text' as Sample, ROUND(count(*)/pToTNsize) as Ratio\nfrom phonetotext;\n\n`,
            trelloMiddle:`data SampleRecords;\nset `,
            trelloLasts: `;\nrun;\n\nproc print data=SampleRecords;\ntitle "Sample Records";\n    Var Sample /style={fontweight=bold};\n    Var Records;\n    Var Ratio;\nrun;\n\n`,
            language:`proc format ;\nvalue lan 1='English' \n2='Spanish';\n\nvalue eth 1='White' \n2='Black' \n3='Hispanic' \n4='Asian'\n5='Other';\nrun;\n\nproc freq data=phone(rename=(languagef='Language'n)) ;\ntitle 'Language Records';\nTable 'Language'n/nocum;\nformat 'Language'n lan. ;\nrun;\n\nproc freq data=phone(rename=(ethnicityf='Ethnicity'n)) ;\ntitle 'Ethnicity Records';\nTable 'Ethnicity'n/nocum;\nformat 'Ethnicity'n eth. ;\nrun;\n\n`,
            os:`proc sql;\ncreate table overall as\nselect count(*) as Records, 'Overall' as Sample, ROUND(count(*)/Nsize) as Ratio\nfrom phone;\n\nproc sql;\ncreate table base as\nselect count(*) as Records, 'Base' as Sample, ROUND(count(*)/Nsizebase) as Ratio\nfrom phone\nwhere sampletype=1;\n\nproc sql;\ncreate table os as\nselect count(*) as Records, 'OS' as Sample, ROUND(count(*)/Nsizeos) as Ratio\nfrom phone\nwhere sampletype=2;\n\ndata Sampletype_Records;\nset overall base os;\n\nproc print data=Sampletype_Records;\ntitle "Sampletype Records";\nVar Sample /style={fontweight=bold};\nVar Records;\nVar Ratio;\nrun;\n\n/* Counts per sample */\n\nproc sql;\ncreate table phoneB as\nselect count(*) as Records, 'PhoneBase' as Sample\nfrom phone\nwhere sampletype=1;\n\nproc sql;\ncreate table textB as\nselect count(*) as Records, 'TextBase' as Sample\nfrom text\nwhere sampletype=1;\n\nproc sql;\ncreate table phoneOS as\nselect count(*) as Records, 'PhoneOS' as Sample\nfrom phone\nwhere sampletype=2;\n\nproc sql;\ncreate table textOS as\nselect count(*) as Records, 'TextOS' as Sample\nfrom text\nwhere sampletype=2;\n\ndata SampleRecords;\nset phoneB textB phoneOS textOS;\n\nproc print data=SampleRecords;\ntitle "Sample Records";\nVar Sample /style={fontweight=bold};\nVar Records;\nrun;\n\n`
        },
        checking:{
            preFlagCheck:`data phonesample; set phone;\ndata textsample; set text;\n\ndata phonesample; \nset phonesample;\nPhoneflag="Incorrect";\nif phonef = phone then Phoneflag="Correct";\n\nproc sql;\ncreate table PhoneFlagcheck as\nselect distinct Phoneflag,'Phone flag check for Phone sample' as Checks,\ncase\nwhen Phoneflag = "Correct" then 'Correct'\nEnd as Correct, case\nwhen Phoneflag = "Incorrect" then 'Incorrect'\nEnd as Incorrect\nfrom phonesample;\nquit;\n\nProc format; \nValue $TFColor\n"Correct"=Green\n"Incorrect"=Red;\nrun;\n\nProc print data=PhoneFlagCheck;\nVar Phoneflag / style = {fontweight=bold Color=$TFColor.};\nrun;\n\n`,
            postFlagCheck:`proc sql;\n\ntitle 'Phonetype Flag';\nselect distinct(Phone_Type),phonetypef from phonesample\ngroup by Phone_Type, phonetypef\nORDER BY phonetypef;\n\ntitle 'Gender Flag';\nselect distinct(Gender),genderf from phonesample\ngroup by Gender, genderf\nORDER BY genderf;\n\ntitle 'Age Flag';\nselect distinct agef,\nmin(Age) as Min_Age,\nmax(Age) as max_Age\nfrom phonesample\ngroup by agef;\n\ntitle 'Party flag';\nselect distinct(party),partyf from phonesample\ngroup by party, partyf\nORDER BY partyf;\n\ntitle 'Ethnicity flag';\nselect distinct(Race),ethnicityf from phonesample\ngroup by Race, ethnicityf\nORDER BY ethnicityf;\n\ntitle 'Region Flag';\nselect distinct(Area),regionf from phonesample\ngroup by Area, regionf\nORDER BY regionf;\n\nquit;\n\n/* Headers Checking codes*/\n\nproc contents Data=phonesample Noprint Out= OG_Variablename VARNUM;\nrun;\n\nProc sort data= OG_Variablename out=Variablecheck (Keep= NAME VARNUM);\nby VARNUM;\nwhere VARNUM <= 18;\nrun;\n\ndata headers;\ninput @1 Precodes $ 1-16 @17  VARNUM;\ndatalines;\nfirstname        1\nlastname         2\nemail            3\ntoken            4\nphonef           5\nphonetypef       6\nClusterF         7\ngenderf          8\nagef             9\npartyf           10\nethnicityf       11\nmodef            12\nsampletype       13\nadditionalsample 14\nregionf    	 	 15\nplaceholder1 	 16\nplaceholder2 	 17\nplaceholder3	 18\n;\nrun;\n\nData Headerscheck; \nMerge Headers Variablecheck;\nby VARNUM;\nrun;\n\nData Finalheadercheck; \nset Headerscheck;\nVariable_name_check="Incorrect";\nif Precodes=Name then Variable_name_check="Correct";\n\nProc format; \nValue $TFColor\n"Correct"=Green\n"Incorrect"=Red;\nrun;\n\nProc print data=Finalheadercheck;\ntitle "Please check if flag orders align";\nVar Precodes VARNUM Name;\nVar Variable_name_check / style = {fontweight=bold Color=$TFColor.};\nrun;\n\n/* Checks for Phone sample*/\n\nproc sql;\ncreate table Modecheck as\nselect distinct Modef,'Mode check for Phone sample' as Checks,\ncase\nwhen Modef = "1" then 'Correct'\nEnd as Correct, case\nwhen Modef NE "1" then 'Incorrect'\nEnd as Incorrect\nfrom phonesample;\nquit;\n\nproc sql;\ncreate table Clustercheck as\nselect distinct Clusterf,'Cluster check for Phone sample' as Checks,\ncase\nwhen Clusterf = "" then 'Correct'\nEnd as Correct, case\nwhen Clusterf NE "" then 'Incorrect'\nEnd as Incorrect\nfrom phonesample;\nquit;\n\nproc sql;\ncreate table Emailcheck as\nselect distinct email,'Email check for Phone sample' as Checks,\ncase\nwhen email = "rf@rf.com" then 'Correct'\nEnd as Correct, case\nwhen email NE "rf@rf.com" then 'Incorrect'\nEnd as Incorrect\nfrom phonesample;\nquit;\n\n/* Code to look at unique Phones in sample*/\n\nPROC SQL print; \nCreate table TotalPhone as  \nSELECT count(phonef) AS Total_Phone \nFROM phonesample;\nQUIT;\n\nPROC SQL print; \nCreate table DistinctPhones as\nSELECT count(distinct phone) AS distinct_Phone \nFROM phonesample;\nQUIT;\n\nPROC SQL print; \nCreate table TotalToken as  \nSELECT count(Token) AS Total_Token \nFROM phonesample;\nQUIT;\n\nPROC SQL print; \nCreate table DistinctToken as\nSELECT count(distinct Token) AS distinct_Token \nFROM phonesample;\nQUIT;\n\nData Phonechecks;\nset TotalPhone; set DistinctPhones;\nrun;\n\nData Phonecheks1;\nSet Phonechecks;\n\nif Total_Phone = Distinct_Phone then Correct = "Correct";\nif Total_Phone ~= Distinct_Phone then Incorrect = "Incorrect";\nChecks="Unique Phone Check for Phone sample";\nrun;\n\nData Tokenchecks;\nset TotalToken; set DistinctToken;\nrun;\n\nData Tokencheks1;\nSet Tokenchecks;\n\nif Total_Token = Distinct_Token then Correct = "Correct";\nif Total_Token ~= Distinct_Token then Incorrect = "Incorrect";\nChecks="Unique Token Check for Phone sample";\nrun;\n\nData Mergecheck; \nset Modecheck Clustercheck emailcheck Phonecheks1 Tokencheks1;\nrun;\n\nProc format; \nValue $TFColor\n"Correct"=Green\n"Incorrect"=Red;\nrun;\n\nProc print data=Mergecheck;\ntitle "Status of all the checks required for Phone sample";\nVar Checks / style = {fontweight=bold};\nVar Correct / Style = {fontweight=bold Color=$TFColor.};\nVar Incorrect / Style = {fontweight=bold Color=$TFColor.}; \nrun;\n\n/* Checks for Text Sample*/\n\nproc sql;\ncreate table Modecheck as\nselect distinct Modef,'Mode check for Text sample' as Checks,\ncase\nwhen Modef = "3" then 'Correct'\nEnd as Correct, case\nwhen Modef NE "3" then 'Incorrect'\nEnd as Incorrect\nfrom textsample;\nquit;\n\nproc sql;\ncreate table Clustercheck as\nselect distinct Clusterf,'Cluster check for Text sample' as Checks,\ncase\nwhen Clusterf = "" then 'Correct'\nEnd as Correct, case\nwhen Clusterf NE "" then 'Incorrect'\nEnd as Incorrect\nfrom textsample;\nquit;\n\nproc sql;\ncreate table Emailcheck as\nselect distinct email,'Email check for Text sample' as Checks,\ncase\nwhen email = "rf@rf.com" then 'Correct'\nEnd as Correct, case\nwhen email NE "rf@rf.com" then 'Incorrect'\nEnd as Incorrect\nfrom textsample;\nquit;\n\nData textsample; Set textsample;\nToken_Check="Incorrect";\nif substr(Token,1,1)="T" then Token_Check="Correct";\nrun;\n\nproc sql;\ncreate table TokenCheck as\nselect distinct Token_Check, '"T" in token check for Text sample' as Checks,\ncase \nwhen Token_Check = "Correct" then "Correct"\nend as Correct, Case\nwhen Token_Check = "Incorrect" then "Incorrect"\nend as Incorrect\nfrom textsample;\nquit;\n\n/* Code to look at unique Phones in Phone/Token in Textsample*/\n\nPROC SQL print; \nCreate table TotalPhone as  \nSELECT count(phonef) AS Total_Phone \nFROM textsample;\nQUIT;\n\nPROC SQL print; \nCreate table DistinctPhones as\nSELECT count(distinct phone) AS distinct_Phone \nFROM textsample;\nQUIT;\n\nData Phonechecks1;\nset TotalPhone; set DistinctPhones;\nrun;\n\nData Phonecheks1;\nSet Phonechecks1;\n\nif Total_Phone = Distinct_Phone then Correct = "Correct";\nif Total_Phone ~= Distinct_Phone then Incorrect = "Incorrect";\nChecks="Unique Phone Check for Text sample";\nrun;\n\nPROC SQL print; \nCreate table TotalToken as  \nSELECT count(token) AS Total_Token \nFROM textsample;\nQUIT;\n\nPROC SQL print; \nCreate table DistinctToken as\nSELECT count(distinct Token) AS distinct_Token \nFROM textsample;\nQUIT;\n\nData Tokenchecks1;\nset TotalToken; set DistinctToken;\nrun;\n\nData Tokencheks1;\nSet Tokenchecks1;\n\nif Total_Token = Distinct_Token then Correct = "Correct";\nif Total_Token ~= Distinct_Token then Incorrect = "Incorrect";\nChecks="Unique Token Check for Text sample";\nrun;\n\nData Mergecheck; \nset Modecheck Clustercheck EmailCheck TokenCheck Tokencheks1 Phonecheks1;\nrun;\n\nProc format; \nValue $TFColor\n"Correct"=Green\n"Incorrect"=Red;\nrun;\n\nProc print data=Mergecheck;\ntitle "Status of all the checks required for Text sample";\nVar Checks / style = {fontweight=bold};\nVar Correct / Style = {fontweight=bold Color=$TFColor.};\nVar Incorrect / Style = {fontweight=bold Color=$TFColor.}; \nrun;`
        }
    },
    {
        id:"F&3PDI",
        info:{
            name: "F&3 PDI",
            group: "client",
            id:"F&3PDI"
        },
        imports: {
            excel: `proc import datafile=filepath\nout=sample_import\ndbms=excel\nreplace;\ngetnames=Yes;\nsheet='Sheet 1';\nrun;`,
            csv:`proc import datafile=filepath\nout=sample_import\ndbms=csv\nreplace;\ngetnames=Yes;\nsheet='Sheet 1';\nrun;`,
            text: `proc import datafile=filepath\nout=sample_import\ndbms=text\nreplace;\ngetnames=Yes;\nsheet='Sheet 1';\nrun;`,
            dbf: `proc import datafile=filepath\nout=sample_import\ndbms=dbf\nreplace;\ngetnames=Yes;\nsheet='Sheet 1';\nrun;`,
            sav:`proc import datafile=filepath\nout=sample_import\ndbms=sav\nreplace;\ngetnames=Yes;\nsheet='Sheet 1';\nrun;`
        },
        flagging: {
            codes: {
                codeInitials:`data sample_processing;\nset sample_import;\n\n`,
                standardCodes:`firstname=First_Name;\nlastname=Last_Name;\n\nemail='rf@rf.com';\n\ntoken=compress(UID,'{}-',' ');\n\nphonef=Phone;\n\nphonetypef=Phone_Type;\n\nclusterf='';\n\ngenderf=3;\nif Gender ='M' then genderf=1;\nif Gender ='F' then genderf=2;\nif Gender ='U' then genderf=3;\n\nagef=7;\nIF 18<=AGE<=29 THEN agef=1;\nIF 30<=AGE<=40 THEN agef=2;\nIF 41<=AGE<=55 THEN agef=3;\nIF 56<=AGE<=65 THEN agef=4;\nIF 66<=AGE<=75 THEN agef=5;\nIF 76<=AGE<=200 THEN agef=6;\n\npartyf=2;\nif Party ='Republican' then partyf=1;\n\nethnicityf=6;\nif Race='White' then ethnicityf=1;\nif Race='Black' then ethnicityf=2;\nif Race='Hispanic' then ethnicityf=3;\nif Race='Asian' then ethnicityf=4;\nif Race='Other' then ethnicityf=5;\n\nmodef='';\nsampletype='';\nadditionalsample='';\n\nregionf=AREA_1;\n\nplaceholder1='';\nplaceholder2='';\nplaceholder3='';\n\n`,
                codeLasts:`run;`,
                
            },
            retain: {
                retainInitials:`data sample_processing;\nRetain`,
                standardVariables:`firstname lastname email token phonef phonetypef clusterf genderf agef partyf ethnicityf modef sampletype additionalsample regionf placeholder1 placeholder2 placeholder3`,
                retainLasts:`set sample_processing;\nrun;\n`,
            }
        },
        scrubbing: {
            filePath:`proc import datafile=filepath\nout=scrublist\ndbms=excel\nreplace;\ngetnames=Yes;\nsheet='Sheet1';\nmixed=Yes;\nscantext=Yes;\nrun;\n\n`,
            middle:`proc sort data=sample_processing \nout=sample_processing \nnodupkey \ndupout=tokendupsdeleted;\nby token;\nrun;\n \n\ndata sample_processing; set sample_processing;\n    full_nameKGS=upcase(compress(catx('', firstname, lastname)));\nrun;\n \n\nproc SQL;\n\ncreate table name as\nselect * from sample_processing where full_nameKGS not in (select fullname from scrublist);\n\ncreate table exactname as\nselect * from sample_processing where full_nameKGS in (select fullname from scrublist);\n\n\ncreate table name2 as \nselect * from name where trimn(cats(phonef)) not in (select trimn(cats(number)) from  scrublist);\n\ncreate table PhoneDNC as \nselect * from name where trimn(cats(phonef)) in (select trimn(cats(number)) from  scrublist);\n\ncreate table name3 as \nselect * from name2 where full_nameKGS not in (select dnc from  scrublist);\n\ncreate table DNCNAMES as \nselect * from name2 where full_nameKGS in (select dnc from  scrublist);\n\nquit;\n\n\ndata name4; set name3;\nlastname1=UPCASE(trimn(lastname));\nrun;\n\n`,
            names:`proc sql;\ncreate table name1 as\nselect * from name4 where lastname1 not in \n(namelist);\n\ncreate table Lastnameremoved as \nselect * from Name4 where lastname1 in \n(namelist);\nquit;\n\n`
        },
        splitting: {
            standard:{
                email:`* Standard Email Splitting Codes;\n\n`,
                phone:`Proc sort data=name1 \nout=Phone \nnodupkey \ndupout=drop_dupphone;\nby phonef;\n\ndata Phone; set Phone;\nModef=1;\nRandomKGS=ranuni(123456789);\nrun;\n \nproc sort data=Phone;\nby RandomKGS;\nrun;\n \n\ndata Phone; set Phone;\ndrop full_nameKGS RandomKGS lastname1;\nrun;\n\n`,
                text:`proc sort data=Phone(where=(phonetypef = 2)) \nout=text nodupkey dupout=drop_duptextphone;\nby phonef;\nrun;\n\ndata Text;\nLength firstname lastname email token $ 100;\nset Text;\nmodef=3;\ntoken=cats("T",token);\nRandomKGS=ranuni(123456789);\nrun;\n\nproc sort data=Text;\nby RandomKGS;\nrun;\n\n\ndata Text; set Text;\ndrop RandomKGS;\nrun;\n\n`,
                eToP:`* Standard Email to Phone Splitting Codes;\n\n`,
                pToT:`* Standard Phone to Text Splitting Codes;\n\n`
            },
            ssbased:{
                email:`* Sample Source Based Email Splitting Codes;\n\n`,
                phone:`* Sample Source Based Phone Splitting Codes;\n\n`,
                text:`* Sample Source Based Text Splitting Codes;\n\n`,
                eToP:`* Sample Source Based Email to Phone Splitting Codes;\n\n`,
                pToT:`* Sample Source Based Phone to Text Splitting Codes;\n\n`
            },
            splittingLasts:`proc sql;\nselect memname,nlobS\nfrom dictionary.tables\nwhere libname='WORK'\n and memname IN ("LASTNAMEREMOVED" , "EXACTNAME" , "DROP_DUPPHONE" , "DROP_DUPTEXTPHONE", "TOKENDUPSDELETED",\n"TOKENDUPS_FROM_ORIGINAL","PHONEDUPS_FROM_ORIGINAL","TOKENDUPS_FROM_ORIGINAL_TEXT","PHONEDUPS_FROM_ORIGINAL_TEXT","PHONEDNC","DNCNAMES");\nquit;\n\n`,
            exports: {
                email:`PROC EXPORT data=Email\noutfile="folderpath\Email Sample.csv"\ndbms=CSV;\nrun;\n\n`,
                phone:`PROC EXPORT data=Phone\noutfile="folderpath\Phone Sample.csv"\ndbms=CSV;\nrun;\n\n`,
                text:`PROC EXPORT data=Text\noutfile="folderpath\Text Sample.csv"\ndbms=CSV;\nrun;\n\n`,
                eToP:`PROC EXPORT data=EmailToPhone\noutfile="folderpath\EmailToPhone Sample.csv"\ndbms=CSV;\nrun;\n\n`,
                pToT:`PROC EXPORT data=PhoneToText\noutfile="folderpath\PhoneToText Sample.csv"\ndbms=CSV;\nrun;\n\n`,
            }
        },
        frequencies:{
            freqProcInitials:`ods CSV file="folderpath\sample frequencies.CSV";\n\n`,
            freqCodeInitials:`proc freq data=phone;\nTables `,
            freqCodeLasts:`\nrun;\n`,
            freqProcLasts:`ods CSV close;\n\n`,
        },
        trello:{
            trelloInitials:`proc sql;\ntitle 'Cell %';\nselect ROUND(count(phonetypef)/(select count(*)\nfrom phone\nwhere phonetypef <>3)*100) as Percent\nfrom phone\nwhere phonetypef=2;\n\n`,
            email:`create table emails as\nselect count(*) as Records, 'Email' as Sample, ROUND(count(*)/emailNsize) as Ratio\nfrom email;\n\n`,
            phone:`create table phones as\nselect count(*) as Records, 'Phone' as Sample, ROUND(count(*)/phoneNsize) as Ratio\nfrom phone;\n\n`,
            text:`create table texts as\nselect count(*) as Records, 'Text' as Sample, ROUND(count(*)/textNsize) as Ratio\nfrom text;\n\n`,
            eToP:`create table emailtophones as\nselect count(*) as Records, 'Email To Phone' as Sample, ROUND(count(*)/eToPNsize) as Ratio\nfrom emailtophone;\n\n`,
            pToT:`create table phonetotexts as\nselect count(*) as Records, 'Phone To Text' as Sample, ROUND(count(*)/pToTNsize) as Ratio\nfrom phonetotext;\n\n`,
            trelloMiddle:`data SampleRecords;\nset `,
            trelloLasts: `;\nrun;\n\nproc print data=SampleRecords;\ntitle "Sample Records";\n    Var Sample /style={fontweight=bold};\n    Var Records;\n    Var Ratio;\nrun;\n\n`,
            language:`proc format ;\nvalue lan 1='English' \n2='Spanish';\n\nvalue eth 1='White' \n2='Black' \n3='Hispanic' \n4='Asian'\n5='Other';\nrun;\n\nproc freq data=phone(rename=(languagef='Language'n)) ;\ntitle 'Language Records';\nTable 'Language'n/nocum;\nformat 'Language'n lan. ;\nrun;\n\nproc freq data=phone(rename=(ethnicityf='Ethnicity'n)) ;\ntitle 'Ethnicity Records';\nTable 'Ethnicity'n/nocum;\nformat 'Ethnicity'n eth. ;\nrun;\n\n`,
            os:`proc sql;\ncreate table overall as\nselect count(*) as Records, 'Overall' as Sample, ROUND(count(*)/Nsize) as Ratio\nfrom phone;\n\nproc sql;\ncreate table base as\nselect count(*) as Records, 'Base' as Sample, ROUND(count(*)/Nsizebase) as Ratio\nfrom phone\nwhere sampletype=1;\n\nproc sql;\ncreate table os as\nselect count(*) as Records, 'OS' as Sample, ROUND(count(*)/Nsizeos) as Ratio\nfrom phone\nwhere sampletype=2;\n\ndata Sampletype_Records;\nset overall base os;\n\nproc print data=Sampletype_Records;\ntitle "Sampletype Records";\nVar Sample /style={fontweight=bold};\nVar Records;\nVar Ratio;\nrun;\n\n/* Counts per sample */\n\nproc sql;\ncreate table phoneB as\nselect count(*) as Records, 'PhoneBase' as Sample\nfrom phone\nwhere sampletype=1;\n\nproc sql;\ncreate table textB as\nselect count(*) as Records, 'TextBase' as Sample\nfrom text\nwhere sampletype=1;\n\nproc sql;\ncreate table phoneOS as\nselect count(*) as Records, 'PhoneOS' as Sample\nfrom phone\nwhere sampletype=2;\n\nproc sql;\ncreate table textOS as\nselect count(*) as Records, 'TextOS' as Sample\nfrom text\nwhere sampletype=2;\n\ndata SampleRecords;\nset phoneB textB phoneOS textOS;\n\nproc print data=SampleRecords;\ntitle "Sample Records";\nVar Sample /style={fontweight=bold};\nVar Records;\nrun;\n\n`
        },
        checking:{
            preFlagCheck:`data phonesample; set phone;\ndata textsample; set text;\n\ndata phonesample; \nset phonesample;\nPhoneflag="Incorrect";\nif phonef = phone then Phoneflag="Correct";\n\nproc sql;\ncreate table PhoneFlagcheck as\nselect distinct Phoneflag,'Phone flag check for Phone sample' as Checks,\ncase\nwhen Phoneflag = "Correct" then 'Correct'\nEnd as Correct, case\nwhen Phoneflag = "Incorrect" then 'Incorrect'\nEnd as Incorrect\nfrom phonesample;\nquit;\n\nProc format; \nValue $TFColor\n"Correct"=Green\n"Incorrect"=Red;\nrun;\n\nProc print data=PhoneFlagCheck;\nVar Phoneflag / style = {fontweight=bold Color=$TFColor.};\nrun;\n\n`,
            postFlagCheck:`proc sql;\n\ntitle 'Phonetype Flag';\nselect distinct(Phone_Type),phonetypef from phonesample\ngroup by Phone_Type, phonetypef\nORDER BY phonetypef;\n\ntitle 'Gender Flag';\nselect distinct(Gender),genderf from phonesample\ngroup by Gender, genderf\nORDER BY genderf;\n\ntitle 'Age Flag';\nselect distinct agef,\nmin(Age) as Min_Age,\nmax(Age) as max_Age\nfrom phonesample\ngroup by agef;\n\ntitle 'Party flag';\nselect distinct(party),partyf from phonesample\ngroup by party, partyf\nORDER BY partyf;\n\ntitle 'Ethnicity flag';\nselect distinct(Race),ethnicityf from phonesample\ngroup by Race, ethnicityf\nORDER BY ethnicityf;\n\ntitle 'Region Flag';\nselect distinct(Area),regionf from phonesample\ngroup by Area, regionf\nORDER BY regionf;\n\nquit;\n\n/* Headers Checking codes*/\n\nproc contents Data=phonesample Noprint Out= OG_Variablename VARNUM;\nrun;\n\nProc sort data= OG_Variablename out=Variablecheck (Keep= NAME VARNUM);\nby VARNUM;\nwhere VARNUM <= 18;\nrun;\n\ndata headers;\ninput @1 Precodes $ 1-16 @17  VARNUM;\ndatalines;\nfirstname        1\nlastname         2\nemail            3\ntoken            4\nphonef           5\nphonetypef       6\nClusterF         7\ngenderf          8\nagef             9\npartyf           10\nethnicityf       11\nmodef            12\nsampletype       13\nadditionalsample 14\nregionf    	 	 15\nplaceholder1 	 16\nplaceholder2 	 17\nplaceholder3	 18\n;\nrun;\n\nData Headerscheck; \nMerge Headers Variablecheck;\nby VARNUM;\nrun;\n\nData Finalheadercheck; \nset Headerscheck;\nVariable_name_check="Incorrect";\nif Precodes=Name then Variable_name_check="Correct";\n\nProc format; \nValue $TFColor\n"Correct"=Green\n"Incorrect"=Red;\nrun;\n\nProc print data=Finalheadercheck;\ntitle "Please check if flag orders align";\nVar Precodes VARNUM Name;\nVar Variable_name_check / style = {fontweight=bold Color=$TFColor.};\nrun;\n\n/* Checks for Phone sample*/\n\nproc sql;\ncreate table Modecheck as\nselect distinct Modef,'Mode check for Phone sample' as Checks,\ncase\nwhen Modef = "1" then 'Correct'\nEnd as Correct, case\nwhen Modef NE "1" then 'Incorrect'\nEnd as Incorrect\nfrom phonesample;\nquit;\n\nproc sql;\ncreate table Clustercheck as\nselect distinct Clusterf,'Cluster check for Phone sample' as Checks,\ncase\nwhen Clusterf = "" then 'Correct'\nEnd as Correct, case\nwhen Clusterf NE "" then 'Incorrect'\nEnd as Incorrect\nfrom phonesample;\nquit;\n\nproc sql;\ncreate table Emailcheck as\nselect distinct email,'Email check for Phone sample' as Checks,\ncase\nwhen email = "rf@rf.com" then 'Correct'\nEnd as Correct, case\nwhen email NE "rf@rf.com" then 'Incorrect'\nEnd as Incorrect\nfrom phonesample;\nquit;\n\n/* Code to look at unique Phones in sample*/\n\nPROC SQL print; \nCreate table TotalPhone as  \nSELECT count(phonef) AS Total_Phone \nFROM phonesample;\nQUIT;\n\nPROC SQL print; \nCreate table DistinctPhones as\nSELECT count(distinct phone) AS distinct_Phone \nFROM phonesample;\nQUIT;\n\nPROC SQL print; \nCreate table TotalToken as  \nSELECT count(Token) AS Total_Token \nFROM phonesample;\nQUIT;\n\nPROC SQL print; \nCreate table DistinctToken as\nSELECT count(distinct Token) AS distinct_Token \nFROM phonesample;\nQUIT;\n\nData Phonechecks;\nset TotalPhone; set DistinctPhones;\nrun;\n\nData Phonecheks1;\nSet Phonechecks;\n\nif Total_Phone = Distinct_Phone then Correct = "Correct";\nif Total_Phone ~= Distinct_Phone then Incorrect = "Incorrect";\nChecks="Unique Phone Check for Phone sample";\nrun;\n\nData Tokenchecks;\nset TotalToken; set DistinctToken;\nrun;\n\nData Tokencheks1;\nSet Tokenchecks;\n\nif Total_Token = Distinct_Token then Correct = "Correct";\nif Total_Token ~= Distinct_Token then Incorrect = "Incorrect";\nChecks="Unique Token Check for Phone sample";\nrun;\n\nData Mergecheck; \nset Modecheck Clustercheck emailcheck Phonecheks1 Tokencheks1;\nrun;\n\nProc format; \nValue $TFColor\n"Correct"=Green\n"Incorrect"=Red;\nrun;\n\nProc print data=Mergecheck;\ntitle "Status of all the checks required for Phone sample";\nVar Checks / style = {fontweight=bold};\nVar Correct / Style = {fontweight=bold Color=$TFColor.};\nVar Incorrect / Style = {fontweight=bold Color=$TFColor.}; \nrun;\n\n/* Checks for Text Sample*/\n\nproc sql;\ncreate table Modecheck as\nselect distinct Modef,'Mode check for Text sample' as Checks,\ncase\nwhen Modef = "3" then 'Correct'\nEnd as Correct, case\nwhen Modef NE "3" then 'Incorrect'\nEnd as Incorrect\nfrom textsample;\nquit;\n\nproc sql;\ncreate table Clustercheck as\nselect distinct Clusterf,'Cluster check for Text sample' as Checks,\ncase\nwhen Clusterf = "" then 'Correct'\nEnd as Correct, case\nwhen Clusterf NE "" then 'Incorrect'\nEnd as Incorrect\nfrom textsample;\nquit;\n\nproc sql;\ncreate table Emailcheck as\nselect distinct email,'Email check for Text sample' as Checks,\ncase\nwhen email = "rf@rf.com" then 'Correct'\nEnd as Correct, case\nwhen email NE "rf@rf.com" then 'Incorrect'\nEnd as Incorrect\nfrom textsample;\nquit;\n\nData textsample; Set textsample;\nToken_Check="Incorrect";\nif substr(Token,1,1)="T" then Token_Check="Correct";\nrun;\n\nproc sql;\ncreate table TokenCheck as\nselect distinct Token_Check, '"T" in token check for Text sample' as Checks,\ncase \nwhen Token_Check = "Correct" then "Correct"\nend as Correct, Case\nwhen Token_Check = "Incorrect" then "Incorrect"\nend as Incorrect\nfrom textsample;\nquit;\n\n/* Code to look at unique Phones in Phone/Token in Textsample*/\n\nPROC SQL print; \nCreate table TotalPhone as  \nSELECT count(phonef) AS Total_Phone \nFROM textsample;\nQUIT;\n\nPROC SQL print; \nCreate table DistinctPhones as\nSELECT count(distinct phone) AS distinct_Phone \nFROM textsample;\nQUIT;\n\nData Phonechecks1;\nset TotalPhone; set DistinctPhones;\nrun;\n\nData Phonecheks1;\nSet Phonechecks1;\n\nif Total_Phone = Distinct_Phone then Correct = "Correct";\nif Total_Phone ~= Distinct_Phone then Incorrect = "Incorrect";\nChecks="Unique Phone Check for Text sample";\nrun;\n\nPROC SQL print; \nCreate table TotalToken as  \nSELECT count(token) AS Total_Token \nFROM textsample;\nQUIT;\n\nPROC SQL print; \nCreate table DistinctToken as\nSELECT count(distinct Token) AS distinct_Token \nFROM textsample;\nQUIT;\n\nData Tokenchecks1;\nset TotalToken; set DistinctToken;\nrun;\n\nData Tokencheks1;\nSet Tokenchecks1;\n\nif Total_Token = Distinct_Token then Correct = "Correct";\nif Total_Token ~= Distinct_Token then Incorrect = "Incorrect";\nChecks="Unique Token Check for Text sample";\nrun;\n\nData Mergecheck; \nset Modecheck Clustercheck EmailCheck TokenCheck Tokencheks1 Phonecheks1;\nrun;\n\nProc format; \nValue $TFColor\n"Correct"=Green\n"Incorrect"=Red;\nrun;\n\nProc print data=Mergecheck;\ntitle "Status of all the checks required for Text sample";\nVar Checks / style = {fontweight=bold};\nVar Correct / Style = {fontweight=bold Color=$TFColor.};\nVar Incorrect / Style = {fontweight=bold Color=$TFColor.}; \nrun;`
        }
    },    
    {
        id:"F&3RES",
        info:{
            name: "F&3 Residential",
            group: "client",
            id:"F&3RES"
        },
        imports: {
            excel: `proc import datafile=filepath\nout=sample_import\ndbms=excel\nreplace;\ngetnames=Yes;\nsheet='Sheet 1';\nrun;`,
            csv:`proc import datafile=filepath\nout=sample_import\ndbms=csv\nreplace;\ngetnames=Yes;\nsheet='Sheet 1';\nrun;`,
            text: `proc import datafile=filepath\nout=sample_import\ndbms=text\nreplace;\ngetnames=Yes;\nsheet='Sheet 1';\nrun;`,
            dbf: `proc import datafile=filepath\nout=sample_import\ndbms=dbf\nreplace;\ngetnames=Yes;\nsheet='Sheet 1';\nrun;`,
            sav:`proc import datafile=filepath\nout=sample_import\ndbms=sav\nreplace;\ngetnames=Yes;\nsheet='Sheet 1';\nrun;`
        },
        flagging: {
            codes: {
                codeInitials:`data sample_processing;\nset sample_import;\n\n`,
                standardCodes:`firstname=First_Name;\nlastname=Last_Name;\n\nemail='rf@rf.com';\n\ntoken=compress(UID,'{}-',' ');\n\nphonef=Phone;\n\nphonetypef=Phone_Type;\n\nclusterf='';\n\ngenderf=3;\nif Gender ='M' then genderf=1;\nif Gender ='F' then genderf=2;\nif Gender ='U' then genderf=3;\n\nagef=7;\nIF 18<=AGE<=29 THEN agef=1;\nIF 30<=AGE<=40 THEN agef=2;\nIF 41<=AGE<=55 THEN agef=3;\nIF 56<=AGE<=65 THEN agef=4;\nIF 66<=AGE<=75 THEN agef=5;\nIF 76<=AGE<=200 THEN agef=6;\n\npartyf=2;\nif Party ='Republican' then partyf=1;\n\nethnicityf=6;\nif Race='White' then ethnicityf=1;\nif Race='Black' then ethnicityf=2;\nif Race='Hispanic' then ethnicityf=3;\nif Race='Asian' then ethnicityf=4;\nif Race='Other' then ethnicityf=5;\n\nmodef='';\nsampletype='';\nadditionalsample='';\n\nregionf=AREA_1;\n\nplaceholder1='';\nplaceholder2='';\nplaceholder3='';\n\n`,
                codeLasts:`run;`,
                
            },
            retain: {
                retainInitials:`data sample_processing;\nRetain`,
                standardVariables:`firstname lastname email token phonef phonetypef clusterf genderf agef partyf ethnicityf modef sampletype additionalsample regionf placeholder1 placeholder2 placeholder3`,
                retainLasts:`set sample_processing;\nrun;\n`,
            }
        },
        scrubbing: {
            filePath:`proc import datafile=filepath\nout=scrublist\ndbms=excel\nreplace;\ngetnames=Yes;\nsheet='Sheet1';\nmixed=Yes;\nscantext=Yes;\nrun;\n\n`,
            middle:`proc sort data=sample_processing \nout=sample_processing \nnodupkey \ndupout=tokendupsdeleted;\nby token;\nrun;\n \n\ndata sample_processing; set sample_processing;\n    full_nameKGS=upcase(compress(catx('', firstname, lastname)));\nrun;\n \n\nproc SQL;\n\ncreate table name as\nselect * from sample_processing where full_nameKGS not in (select fullname from scrublist);\n\ncreate table exactname as\nselect * from sample_processing where full_nameKGS in (select fullname from scrublist);\n\n\ncreate table name2 as \nselect * from name where trimn(cats(phonef)) not in (select trimn(cats(number)) from  scrublist);\n\ncreate table PhoneDNC as \nselect * from name where trimn(cats(phonef)) in (select trimn(cats(number)) from  scrublist);\n\ncreate table name3 as \nselect * from name2 where full_nameKGS not in (select dnc from  scrublist);\n\ncreate table DNCNAMES as \nselect * from name2 where full_nameKGS in (select dnc from  scrublist);\n\nquit;\n\n\ndata name4; set name3;\nlastname1=UPCASE(trimn(lastname));\nrun;\n\n`,
            names:`proc sql;\ncreate table name1 as\nselect * from name4 where lastname1 not in \n(namelist);\n\ncreate table Lastnameremoved as \nselect * from Name4 where lastname1 in \n(namelist);\nquit;\n\n`
        },
        splitting: {
            standard:{
                email:`* Standard Email Splitting Codes;\n\n`,
                phone:`Proc sort data=name1 \nout=Phone \nnodupkey \ndupout=drop_dupphone;\nby phonef;\n\ndata Phone; set Phone;\nModef=1;\nRandomKGS=ranuni(123456789);\nrun;\n \nproc sort data=Phone;\nby RandomKGS;\nrun;\n \n\ndata Phone; set Phone;\ndrop full_nameKGS RandomKGS lastname1;\nrun;\n\n`,
                text:`proc sort data=Phone(where=(phonetypef = 2)) \nout=text nodupkey dupout=drop_duptextphone;\nby phonef;\nrun;\n\ndata Text;\nLength firstname lastname email token $ 100;\nset Text;\nmodef=3;\ntoken=cats("T",token);\nRandomKGS=ranuni(123456789);\nrun;\n\nproc sort data=Text;\nby RandomKGS;\nrun;\n\n\ndata Text; set Text;\ndrop RandomKGS;\nrun;\n\n`,
                eToP:`* Standard Email to Phone Splitting Codes;\n\n`,
                pToT:`* Standard Phone to Text Splitting Codes;\n\n`
            },
            ssbased:{
                email:`* Sample Source Based Email Splitting Codes;\n\n`,
                phone:`* Sample Source Based Phone Splitting Codes;\n\n`,
                text:`* Sample Source Based Text Splitting Codes;\n\n`,
                eToP:`* Sample Source Based Email to Phone Splitting Codes;\n\n`,
                pToT:`* Sample Source Based Phone to Text Splitting Codes;\n\n`
            },
            splittingLasts:`proc sql;\nselect memname,nlobS\nfrom dictionary.tables\nwhere libname='WORK'\n and memname IN ("LASTNAMEREMOVED" , "EXACTNAME" , "DROP_DUPPHONE" , "DROP_DUPTEXTPHONE", "TOKENDUPSDELETED",\n"TOKENDUPS_FROM_ORIGINAL","PHONEDUPS_FROM_ORIGINAL","TOKENDUPS_FROM_ORIGINAL_TEXT","PHONEDUPS_FROM_ORIGINAL_TEXT","PHONEDNC","DNCNAMES");\nquit;\n\n`,
            exports: {
                email:`PROC EXPORT data=Email\noutfile="folderpath\Email Sample.csv"\ndbms=CSV;\nrun;\n\n`,
                phone:`PROC EXPORT data=Phone\noutfile="folderpath\Phone Sample.csv"\ndbms=CSV;\nrun;\n\n`,
                text:`PROC EXPORT data=Text\noutfile="folderpath\Text Sample.csv"\ndbms=CSV;\nrun;\n\n`,
                eToP:`PROC EXPORT data=EmailToPhone\noutfile="folderpath\EmailToPhone Sample.csv"\ndbms=CSV;\nrun;\n\n`,
                pToT:`PROC EXPORT data=PhoneToText\noutfile="folderpath\PhoneToText Sample.csv"\ndbms=CSV;\nrun;\n\n`,
            }
        },
        frequencies:{
            freqProcInitials:`ods CSV file="folderpath\sample frequencies.CSV";\n\n`,
            freqCodeInitials:`proc freq data=phone;\nTables `,
            freqCodeLasts:`\nrun;\n`,
            freqProcLasts:`ods CSV close;\n\n`,
        },
        trello:{
            trelloInitials:`proc sql;\ntitle 'Cell %';\nselect ROUND(count(phonetypef)/(select count(*)\nfrom phone\nwhere phonetypef <>3)*100) as Percent\nfrom phone\nwhere phonetypef=2;\n\n`,
            email:`create table emails as\nselect count(*) as Records, 'Email' as Sample, ROUND(count(*)/emailNsize) as Ratio\nfrom email;\n\n`,
            phone:`create table phones as\nselect count(*) as Records, 'Phone' as Sample, ROUND(count(*)/phoneNsize) as Ratio\nfrom phone;\n\n`,
            text:`create table texts as\nselect count(*) as Records, 'Text' as Sample, ROUND(count(*)/textNsize) as Ratio\nfrom text;\n\n`,
            eToP:`create table emailtophones as\nselect count(*) as Records, 'Email To Phone' as Sample, ROUND(count(*)/eToPNsize) as Ratio\nfrom emailtophone;\n\n`,
            pToT:`create table phonetotexts as\nselect count(*) as Records, 'Phone To Text' as Sample, ROUND(count(*)/pToTNsize) as Ratio\nfrom phonetotext;\n\n`,
            trelloMiddle:`data SampleRecords;\nset `,
            trelloLasts: `;\nrun;\n\nproc print data=SampleRecords;\ntitle "Sample Records";\n    Var Sample /style={fontweight=bold};\n    Var Records;\n    Var Ratio;\nrun;\n\n`,
            language:`proc format ;\nvalue lan 1='English' \n2='Spanish';\n\nvalue eth 1='White' \n2='Black' \n3='Hispanic' \n4='Asian'\n5='Other';\nrun;\n\nproc freq data=phone(rename=(languagef='Language'n)) ;\ntitle 'Language Records';\nTable 'Language'n/nocum;\nformat 'Language'n lan. ;\nrun;\n\nproc freq data=phone(rename=(ethnicityf='Ethnicity'n)) ;\ntitle 'Ethnicity Records';\nTable 'Ethnicity'n/nocum;\nformat 'Ethnicity'n eth. ;\nrun;\n\n`,
            os:`proc sql;\ncreate table overall as\nselect count(*) as Records, 'Overall' as Sample, ROUND(count(*)/Nsize) as Ratio\nfrom phone;\n\nproc sql;\ncreate table base as\nselect count(*) as Records, 'Base' as Sample, ROUND(count(*)/Nsizebase) as Ratio\nfrom phone\nwhere sampletype=1;\n\nproc sql;\ncreate table os as\nselect count(*) as Records, 'OS' as Sample, ROUND(count(*)/Nsizeos) as Ratio\nfrom phone\nwhere sampletype=2;\n\ndata Sampletype_Records;\nset overall base os;\n\nproc print data=Sampletype_Records;\ntitle "Sampletype Records";\nVar Sample /style={fontweight=bold};\nVar Records;\nVar Ratio;\nrun;\n\n/* Counts per sample */\n\nproc sql;\ncreate table phoneB as\nselect count(*) as Records, 'PhoneBase' as Sample\nfrom phone\nwhere sampletype=1;\n\nproc sql;\ncreate table textB as\nselect count(*) as Records, 'TextBase' as Sample\nfrom text\nwhere sampletype=1;\n\nproc sql;\ncreate table phoneOS as\nselect count(*) as Records, 'PhoneOS' as Sample\nfrom phone\nwhere sampletype=2;\n\nproc sql;\ncreate table textOS as\nselect count(*) as Records, 'TextOS' as Sample\nfrom text\nwhere sampletype=2;\n\ndata SampleRecords;\nset phoneB textB phoneOS textOS;\n\nproc print data=SampleRecords;\ntitle "Sample Records";\nVar Sample /style={fontweight=bold};\nVar Records;\nrun;\n\n`
        },
        checking:{
            preFlagCheck:`data phonesample; set phone;\ndata textsample; set text;\n\ndata phonesample; \nset phonesample;\nPhoneflag="Incorrect";\nif phonef = phone then Phoneflag="Correct";\n\nproc sql;\ncreate table PhoneFlagcheck as\nselect distinct Phoneflag,'Phone flag check for Phone sample' as Checks,\ncase\nwhen Phoneflag = "Correct" then 'Correct'\nEnd as Correct, case\nwhen Phoneflag = "Incorrect" then 'Incorrect'\nEnd as Incorrect\nfrom phonesample;\nquit;\n\nProc format; \nValue $TFColor\n"Correct"=Green\n"Incorrect"=Red;\nrun;\n\nProc print data=PhoneFlagCheck;\nVar Phoneflag / style = {fontweight=bold Color=$TFColor.};\nrun;\n\n`,
            postFlagCheck:`proc sql;\n\ntitle 'Phonetype Flag';\nselect distinct(Phone_Type),phonetypef from phonesample\ngroup by Phone_Type, phonetypef\nORDER BY phonetypef;\n\ntitle 'Gender Flag';\nselect distinct(Gender),genderf from phonesample\ngroup by Gender, genderf\nORDER BY genderf;\n\ntitle 'Age Flag';\nselect distinct agef,\nmin(Age) as Min_Age,\nmax(Age) as max_Age\nfrom phonesample\ngroup by agef;\n\ntitle 'Party flag';\nselect distinct(party),partyf from phonesample\ngroup by party, partyf\nORDER BY partyf;\n\ntitle 'Ethnicity flag';\nselect distinct(Race),ethnicityf from phonesample\ngroup by Race, ethnicityf\nORDER BY ethnicityf;\n\ntitle 'Region Flag';\nselect distinct(Area),regionf from phonesample\ngroup by Area, regionf\nORDER BY regionf;\n\nquit;\n\n/* Headers Checking codes*/\n\nproc contents Data=phonesample Noprint Out= OG_Variablename VARNUM;\nrun;\n\nProc sort data= OG_Variablename out=Variablecheck (Keep= NAME VARNUM);\nby VARNUM;\nwhere VARNUM <= 18;\nrun;\n\ndata headers;\ninput @1 Precodes $ 1-16 @17  VARNUM;\ndatalines;\nfirstname        1\nlastname         2\nemail            3\ntoken            4\nphonef           5\nphonetypef       6\nClusterF         7\ngenderf          8\nagef             9\npartyf           10\nethnicityf       11\nmodef            12\nsampletype       13\nadditionalsample 14\nregionf    	 	 15\nplaceholder1 	 16\nplaceholder2 	 17\nplaceholder3	 18\n;\nrun;\n\nData Headerscheck; \nMerge Headers Variablecheck;\nby VARNUM;\nrun;\n\nData Finalheadercheck; \nset Headerscheck;\nVariable_name_check="Incorrect";\nif Precodes=Name then Variable_name_check="Correct";\n\nProc format; \nValue $TFColor\n"Correct"=Green\n"Incorrect"=Red;\nrun;\n\nProc print data=Finalheadercheck;\ntitle "Please check if flag orders align";\nVar Precodes VARNUM Name;\nVar Variable_name_check / style = {fontweight=bold Color=$TFColor.};\nrun;\n\n/* Checks for Phone sample*/\n\nproc sql;\ncreate table Modecheck as\nselect distinct Modef,'Mode check for Phone sample' as Checks,\ncase\nwhen Modef = "1" then 'Correct'\nEnd as Correct, case\nwhen Modef NE "1" then 'Incorrect'\nEnd as Incorrect\nfrom phonesample;\nquit;\n\nproc sql;\ncreate table Clustercheck as\nselect distinct Clusterf,'Cluster check for Phone sample' as Checks,\ncase\nwhen Clusterf = "" then 'Correct'\nEnd as Correct, case\nwhen Clusterf NE "" then 'Incorrect'\nEnd as Incorrect\nfrom phonesample;\nquit;\n\nproc sql;\ncreate table Emailcheck as\nselect distinct email,'Email check for Phone sample' as Checks,\ncase\nwhen email = "rf@rf.com" then 'Correct'\nEnd as Correct, case\nwhen email NE "rf@rf.com" then 'Incorrect'\nEnd as Incorrect\nfrom phonesample;\nquit;\n\n/* Code to look at unique Phones in sample*/\n\nPROC SQL print; \nCreate table TotalPhone as  \nSELECT count(phonef) AS Total_Phone \nFROM phonesample;\nQUIT;\n\nPROC SQL print; \nCreate table DistinctPhones as\nSELECT count(distinct phone) AS distinct_Phone \nFROM phonesample;\nQUIT;\n\nPROC SQL print; \nCreate table TotalToken as  \nSELECT count(Token) AS Total_Token \nFROM phonesample;\nQUIT;\n\nPROC SQL print; \nCreate table DistinctToken as\nSELECT count(distinct Token) AS distinct_Token \nFROM phonesample;\nQUIT;\n\nData Phonechecks;\nset TotalPhone; set DistinctPhones;\nrun;\n\nData Phonecheks1;\nSet Phonechecks;\n\nif Total_Phone = Distinct_Phone then Correct = "Correct";\nif Total_Phone ~= Distinct_Phone then Incorrect = "Incorrect";\nChecks="Unique Phone Check for Phone sample";\nrun;\n\nData Tokenchecks;\nset TotalToken; set DistinctToken;\nrun;\n\nData Tokencheks1;\nSet Tokenchecks;\n\nif Total_Token = Distinct_Token then Correct = "Correct";\nif Total_Token ~= Distinct_Token then Incorrect = "Incorrect";\nChecks="Unique Token Check for Phone sample";\nrun;\n\nData Mergecheck; \nset Modecheck Clustercheck emailcheck Phonecheks1 Tokencheks1;\nrun;\n\nProc format; \nValue $TFColor\n"Correct"=Green\n"Incorrect"=Red;\nrun;\n\nProc print data=Mergecheck;\ntitle "Status of all the checks required for Phone sample";\nVar Checks / style = {fontweight=bold};\nVar Correct / Style = {fontweight=bold Color=$TFColor.};\nVar Incorrect / Style = {fontweight=bold Color=$TFColor.}; \nrun;\n\n/* Checks for Text Sample*/\n\nproc sql;\ncreate table Modecheck as\nselect distinct Modef,'Mode check for Text sample' as Checks,\ncase\nwhen Modef = "3" then 'Correct'\nEnd as Correct, case\nwhen Modef NE "3" then 'Incorrect'\nEnd as Incorrect\nfrom textsample;\nquit;\n\nproc sql;\ncreate table Clustercheck as\nselect distinct Clusterf,'Cluster check for Text sample' as Checks,\ncase\nwhen Clusterf = "" then 'Correct'\nEnd as Correct, case\nwhen Clusterf NE "" then 'Incorrect'\nEnd as Incorrect\nfrom textsample;\nquit;\n\nproc sql;\ncreate table Emailcheck as\nselect distinct email,'Email check for Text sample' as Checks,\ncase\nwhen email = "rf@rf.com" then 'Correct'\nEnd as Correct, case\nwhen email NE "rf@rf.com" then 'Incorrect'\nEnd as Incorrect\nfrom textsample;\nquit;\n\nData textsample; Set textsample;\nToken_Check="Incorrect";\nif substr(Token,1,1)="T" then Token_Check="Correct";\nrun;\n\nproc sql;\ncreate table TokenCheck as\nselect distinct Token_Check, '"T" in token check for Text sample' as Checks,\ncase \nwhen Token_Check = "Correct" then "Correct"\nend as Correct, Case\nwhen Token_Check = "Incorrect" then "Incorrect"\nend as Incorrect\nfrom textsample;\nquit;\n\n/* Code to look at unique Phones in Phone/Token in Textsample*/\n\nPROC SQL print; \nCreate table TotalPhone as  \nSELECT count(phonef) AS Total_Phone \nFROM textsample;\nQUIT;\n\nPROC SQL print; \nCreate table DistinctPhones as\nSELECT count(distinct phone) AS distinct_Phone \nFROM textsample;\nQUIT;\n\nData Phonechecks1;\nset TotalPhone; set DistinctPhones;\nrun;\n\nData Phonecheks1;\nSet Phonechecks1;\n\nif Total_Phone = Distinct_Phone then Correct = "Correct";\nif Total_Phone ~= Distinct_Phone then Incorrect = "Incorrect";\nChecks="Unique Phone Check for Text sample";\nrun;\n\nPROC SQL print; \nCreate table TotalToken as  \nSELECT count(token) AS Total_Token \nFROM textsample;\nQUIT;\n\nPROC SQL print; \nCreate table DistinctToken as\nSELECT count(distinct Token) AS distinct_Token \nFROM textsample;\nQUIT;\n\nData Tokenchecks1;\nset TotalToken; set DistinctToken;\nrun;\n\nData Tokencheks1;\nSet Tokenchecks1;\n\nif Total_Token = Distinct_Token then Correct = "Correct";\nif Total_Token ~= Distinct_Token then Incorrect = "Incorrect";\nChecks="Unique Token Check for Text sample";\nrun;\n\nData Mergecheck; \nset Modecheck Clustercheck EmailCheck TokenCheck Tokencheks1 Phonecheks1;\nrun;\n\nProc format; \nValue $TFColor\n"Correct"=Green\n"Incorrect"=Red;\nrun;\n\nProc print data=Mergecheck;\ntitle "Status of all the checks required for Text sample";\nVar Checks / style = {fontweight=bold};\nVar Correct / Style = {fontweight=bold Color=$TFColor.};\nVar Incorrect / Style = {fontweight=bold Color=$TFColor.}; \nrun;`
        }
    },
    {
        id:"IMTCAT",
        info:{
            name: "IMT Catalist",
            group: "client",
            id:"IMTCAT"
        },
        imports: {
            excel: `proc import datafile=filepath\nout=sample_import\ndbms=excel\nreplace;\ngetnames=Yes;\nsheet='Sheet 1';\nrun;`,
            csv:`proc import datafile=filepath\nout=sample_import\ndbms=csv\nreplace;\ngetnames=Yes;\nsheet='Sheet 1';\nrun;`,
            text: `proc import datafile=filepath\nout=sample_import\ndbms=text\nreplace;\ngetnames=Yes;\nsheet='Sheet 1';\nrun;`,
            dbf: `proc import datafile=filepath\nout=sample_import\ndbms=dbf\nreplace;\ngetnames=Yes;\nsheet='Sheet 1';\nrun;`,
            sav:`proc import datafile=filepath\nout=sample_import\ndbms=sav\nreplace;\ngetnames=Yes;\nsheet='Sheet 1';\nrun;`
        },
        flagging: {
            codes: {
                codeInitials:`data sample_processing;\nset sample_import;\n\n`,
                standardCodes:`firstname=First_Name;\nlastname=Last_Name;\n\nemail='rf@rf.com';\n\ntoken=compress(UID,'{}-',' ');\n\nphonef=Phone;\n\nphonetypef=Phone_Type;\n\nclusterf='';\n\ngenderf=3;\nif Gender ='M' then genderf=1;\nif Gender ='F' then genderf=2;\nif Gender ='U' then genderf=3;\n\nagef=7;\nIF 18<=AGE<=29 THEN agef=1;\nIF 30<=AGE<=40 THEN agef=2;\nIF 41<=AGE<=55 THEN agef=3;\nIF 56<=AGE<=65 THEN agef=4;\nIF 66<=AGE<=75 THEN agef=5;\nIF 76<=AGE<=200 THEN agef=6;\n\npartyf=2;\nif Party ='Republican' then partyf=1;\n\nethnicityf=6;\nif Race='White' then ethnicityf=1;\nif Race='Black' then ethnicityf=2;\nif Race='Hispanic' then ethnicityf=3;\nif Race='Asian' then ethnicityf=4;\nif Race='Other' then ethnicityf=5;\n\nmodef='';\nsampletype='';\nadditionalsample='';\n\nregionf=AREA_1;\n\nplaceholder1='';\nplaceholder2='';\nplaceholder3='';\n\n`,
                codeLasts:`run;`,
                
            },
            retain: {
                retainInitials:`data sample_processing;\nRetain`,
                standardVariables:`firstname lastname email token phonef phonetypef clusterf genderf agef partyf ethnicityf modef sampletype additionalsample regionf placeholder1 placeholder2 placeholder3`,
                retainLasts:`set sample_processing;\nrun;\n`,
            }
        },
        scrubbing: {
            filePath:`proc import datafile=filepath\nout=scrublist\ndbms=excel\nreplace;\ngetnames=Yes;\nsheet='Sheet1';\nmixed=Yes;\nscantext=Yes;\nrun;\n\n`,
            middle:`proc sort data=sample_processing \nout=sample_processing \nnodupkey \ndupout=tokendupsdeleted;\nby token;\nrun;\n \n\ndata sample_processing; set sample_processing;\n    full_nameKGS=upcase(compress(catx('', firstname, lastname)));\nrun;\n \n\nproc SQL;\n\ncreate table name as\nselect * from sample_processing where full_nameKGS not in (select fullname from scrublist);\n\ncreate table exactname as\nselect * from sample_processing where full_nameKGS in (select fullname from scrublist);\n\n\ncreate table name2 as \nselect * from name where trimn(cats(phonef)) not in (select trimn(cats(number)) from  scrublist);\n\ncreate table PhoneDNC as \nselect * from name where trimn(cats(phonef)) in (select trimn(cats(number)) from  scrublist);\n\ncreate table name3 as \nselect * from name2 where full_nameKGS not in (select dnc from  scrublist);\n\ncreate table DNCNAMES as \nselect * from name2 where full_nameKGS in (select dnc from  scrublist);\n\nquit;\n\n\ndata name4; set name3;\nlastname1=UPCASE(trimn(lastname));\nrun;\n\n`,
            names:`proc sql;\ncreate table name1 as\nselect * from name4 where lastname1 not in \n(namelist);\n\ncreate table Lastnameremoved as \nselect * from Name4 where lastname1 in \n(namelist);\nquit;\n\n`
        },
        splitting: {
            standard:{
                email:`* Standard Email Splitting Codes;\n\n`,
                phone:`Proc sort data=name1 \nout=Phone \nnodupkey \ndupout=drop_dupphone;\nby phonef;\n\ndata Phone; set Phone;\nModef=1;\nRandomKGS=ranuni(123456789);\nrun;\n \nproc sort data=Phone;\nby RandomKGS;\nrun;\n \n\ndata Phone; set Phone;\ndrop full_nameKGS RandomKGS lastname1;\nrun;\n\n`,
                text:`proc sort data=Phone(where=(phonetypef = 2)) \nout=text nodupkey dupout=drop_duptextphone;\nby phonef;\nrun;\n\ndata Text;\nLength firstname lastname email token $ 100;\nset Text;\nmodef=3;\ntoken=cats("T",token);\nRandomKGS=ranuni(123456789);\nrun;\n\nproc sort data=Text;\nby RandomKGS;\nrun;\n\n\ndata Text; set Text;\ndrop RandomKGS;\nrun;\n\n`,
                eToP:`* Standard Email to Phone Splitting Codes;\n\n`,
                pToT:`* Standard Phone to Text Splitting Codes;\n\n`
            },
            ssbased:{
                email:`* Sample Source Based Email Splitting Codes;\n\n`,
                phone:`* Sample Source Based Phone Splitting Codes;\n\n`,
                text:`* Sample Source Based Text Splitting Codes;\n\n`,
                eToP:`* Sample Source Based Email to Phone Splitting Codes;\n\n`,
                pToT:`* Sample Source Based Phone to Text Splitting Codes;\n\n`
            },
            splittingLasts:`proc sql;\nselect memname,nlobS\nfrom dictionary.tables\nwhere libname='WORK'\n and memname IN ("LASTNAMEREMOVED" , "EXACTNAME" , "DROP_DUPPHONE" , "DROP_DUPTEXTPHONE", "TOKENDUPSDELETED",\n"TOKENDUPS_FROM_ORIGINAL","PHONEDUPS_FROM_ORIGINAL","TOKENDUPS_FROM_ORIGINAL_TEXT","PHONEDUPS_FROM_ORIGINAL_TEXT","PHONEDNC","DNCNAMES");\nquit;\n\n`,
            exports: {
                email:`PROC EXPORT data=Email\noutfile="folderpath\Email Sample.csv"\ndbms=CSV;\nrun;\n\n`,
                phone:`PROC EXPORT data=Phone\noutfile="folderpath\Phone Sample.csv"\ndbms=CSV;\nrun;\n\n`,
                text:`PROC EXPORT data=Text\noutfile="folderpath\Text Sample.csv"\ndbms=CSV;\nrun;\n\n`,
                eToP:`PROC EXPORT data=EmailToPhone\noutfile="folderpath\EmailToPhone Sample.csv"\ndbms=CSV;\nrun;\n\n`,
                pToT:`PROC EXPORT data=PhoneToText\noutfile="folderpath\PhoneToText Sample.csv"\ndbms=CSV;\nrun;\n\n`,
            }
        },
        frequencies:{
            freqProcInitials:`ods CSV file="folderpath\sample frequencies.CSV";\n\n`,
            freqCodeInitials:`proc freq data=phone;\nTables `,
            freqCodeLasts:`\nrun;\n`,
            freqProcLasts:`ods CSV close;\n\n`,
        },
        trello:{
            trelloInitials:`proc sql;\ntitle 'Cell %';\nselect ROUND(count(phonetypef)/(select count(*)\nfrom phone\nwhere phonetypef <>3)*100) as Percent\nfrom phone\nwhere phonetypef=2;\n\n`,
            email:`create table emails as\nselect count(*) as Records, 'Email' as Sample, ROUND(count(*)/emailNsize) as Ratio\nfrom email;\n\n`,
            phone:`create table phones as\nselect count(*) as Records, 'Phone' as Sample, ROUND(count(*)/phoneNsize) as Ratio\nfrom phone;\n\n`,
            text:`create table texts as\nselect count(*) as Records, 'Text' as Sample, ROUND(count(*)/textNsize) as Ratio\nfrom text;\n\n`,
            eToP:`create table emailtophones as\nselect count(*) as Records, 'Email To Phone' as Sample, ROUND(count(*)/eToPNsize) as Ratio\nfrom emailtophone;\n\n`,
            pToT:`create table phonetotexts as\nselect count(*) as Records, 'Phone To Text' as Sample, ROUND(count(*)/pToTNsize) as Ratio\nfrom phonetotext;\n\n`,
            trelloMiddle:`data SampleRecords;\nset `,
            trelloLasts: `;\nrun;\n\nproc print data=SampleRecords;\ntitle "Sample Records";\n    Var Sample /style={fontweight=bold};\n    Var Records;\n    Var Ratio;\nrun;\n\n`,
            language:`proc format ;\nvalue lan 1='English' \n2='Spanish';\n\nvalue eth 1='White' \n2='Black' \n3='Hispanic' \n4='Asian'\n5='Other';\nrun;\n\nproc freq data=phone(rename=(languagef='Language'n)) ;\ntitle 'Language Records';\nTable 'Language'n/nocum;\nformat 'Language'n lan. ;\nrun;\n\nproc freq data=phone(rename=(ethnicityf='Ethnicity'n)) ;\ntitle 'Ethnicity Records';\nTable 'Ethnicity'n/nocum;\nformat 'Ethnicity'n eth. ;\nrun;\n\n`,
            os:`proc sql;\ncreate table overall as\nselect count(*) as Records, 'Overall' as Sample, ROUND(count(*)/Nsize) as Ratio\nfrom phone;\n\nproc sql;\ncreate table base as\nselect count(*) as Records, 'Base' as Sample, ROUND(count(*)/Nsizebase) as Ratio\nfrom phone\nwhere sampletype=1;\n\nproc sql;\ncreate table os as\nselect count(*) as Records, 'OS' as Sample, ROUND(count(*)/Nsizeos) as Ratio\nfrom phone\nwhere sampletype=2;\n\ndata Sampletype_Records;\nset overall base os;\n\nproc print data=Sampletype_Records;\ntitle "Sampletype Records";\nVar Sample /style={fontweight=bold};\nVar Records;\nVar Ratio;\nrun;\n\n/* Counts per sample */\n\nproc sql;\ncreate table phoneB as\nselect count(*) as Records, 'PhoneBase' as Sample\nfrom phone\nwhere sampletype=1;\n\nproc sql;\ncreate table textB as\nselect count(*) as Records, 'TextBase' as Sample\nfrom text\nwhere sampletype=1;\n\nproc sql;\ncreate table phoneOS as\nselect count(*) as Records, 'PhoneOS' as Sample\nfrom phone\nwhere sampletype=2;\n\nproc sql;\ncreate table textOS as\nselect count(*) as Records, 'TextOS' as Sample\nfrom text\nwhere sampletype=2;\n\ndata SampleRecords;\nset phoneB textB phoneOS textOS;\n\nproc print data=SampleRecords;\ntitle "Sample Records";\nVar Sample /style={fontweight=bold};\nVar Records;\nrun;\n\n`
        },
        checking:{
            preFlagCheck:`data phonesample; set phone;\ndata textsample; set text;\n\ndata phonesample; \nset phonesample;\nPhoneflag="Incorrect";\nif phonef = phone then Phoneflag="Correct";\n\nproc sql;\ncreate table PhoneFlagcheck as\nselect distinct Phoneflag,'Phone flag check for Phone sample' as Checks,\ncase\nwhen Phoneflag = "Correct" then 'Correct'\nEnd as Correct, case\nwhen Phoneflag = "Incorrect" then 'Incorrect'\nEnd as Incorrect\nfrom phonesample;\nquit;\n\nProc format; \nValue $TFColor\n"Correct"=Green\n"Incorrect"=Red;\nrun;\n\nProc print data=PhoneFlagCheck;\nVar Phoneflag / style = {fontweight=bold Color=$TFColor.};\nrun;\n\n`,
            postFlagCheck:`proc sql;\n\ntitle 'Phonetype Flag';\nselect distinct(Phone_Type),phonetypef from phonesample\ngroup by Phone_Type, phonetypef\nORDER BY phonetypef;\n\ntitle 'Gender Flag';\nselect distinct(Gender),genderf from phonesample\ngroup by Gender, genderf\nORDER BY genderf;\n\ntitle 'Age Flag';\nselect distinct agef,\nmin(Age) as Min_Age,\nmax(Age) as max_Age\nfrom phonesample\ngroup by agef;\n\ntitle 'Party flag';\nselect distinct(party),partyf from phonesample\ngroup by party, partyf\nORDER BY partyf;\n\ntitle 'Ethnicity flag';\nselect distinct(Race),ethnicityf from phonesample\ngroup by Race, ethnicityf\nORDER BY ethnicityf;\n\ntitle 'Region Flag';\nselect distinct(Area),regionf from phonesample\ngroup by Area, regionf\nORDER BY regionf;\n\nquit;\n\n/* Headers Checking codes*/\n\nproc contents Data=phonesample Noprint Out= OG_Variablename VARNUM;\nrun;\n\nProc sort data= OG_Variablename out=Variablecheck (Keep= NAME VARNUM);\nby VARNUM;\nwhere VARNUM <= 18;\nrun;\n\ndata headers;\ninput @1 Precodes $ 1-16 @17  VARNUM;\ndatalines;\nfirstname        1\nlastname         2\nemail            3\ntoken            4\nphonef           5\nphonetypef       6\nClusterF         7\ngenderf          8\nagef             9\npartyf           10\nethnicityf       11\nmodef            12\nsampletype       13\nadditionalsample 14\nregionf    	 	 15\nplaceholder1 	 16\nplaceholder2 	 17\nplaceholder3	 18\n;\nrun;\n\nData Headerscheck; \nMerge Headers Variablecheck;\nby VARNUM;\nrun;\n\nData Finalheadercheck; \nset Headerscheck;\nVariable_name_check="Incorrect";\nif Precodes=Name then Variable_name_check="Correct";\n\nProc format; \nValue $TFColor\n"Correct"=Green\n"Incorrect"=Red;\nrun;\n\nProc print data=Finalheadercheck;\ntitle "Please check if flag orders align";\nVar Precodes VARNUM Name;\nVar Variable_name_check / style = {fontweight=bold Color=$TFColor.};\nrun;\n\n/* Checks for Phone sample*/\n\nproc sql;\ncreate table Modecheck as\nselect distinct Modef,'Mode check for Phone sample' as Checks,\ncase\nwhen Modef = "1" then 'Correct'\nEnd as Correct, case\nwhen Modef NE "1" then 'Incorrect'\nEnd as Incorrect\nfrom phonesample;\nquit;\n\nproc sql;\ncreate table Clustercheck as\nselect distinct Clusterf,'Cluster check for Phone sample' as Checks,\ncase\nwhen Clusterf = "" then 'Correct'\nEnd as Correct, case\nwhen Clusterf NE "" then 'Incorrect'\nEnd as Incorrect\nfrom phonesample;\nquit;\n\nproc sql;\ncreate table Emailcheck as\nselect distinct email,'Email check for Phone sample' as Checks,\ncase\nwhen email = "rf@rf.com" then 'Correct'\nEnd as Correct, case\nwhen email NE "rf@rf.com" then 'Incorrect'\nEnd as Incorrect\nfrom phonesample;\nquit;\n\n/* Code to look at unique Phones in sample*/\n\nPROC SQL print; \nCreate table TotalPhone as  \nSELECT count(phonef) AS Total_Phone \nFROM phonesample;\nQUIT;\n\nPROC SQL print; \nCreate table DistinctPhones as\nSELECT count(distinct phone) AS distinct_Phone \nFROM phonesample;\nQUIT;\n\nPROC SQL print; \nCreate table TotalToken as  \nSELECT count(Token) AS Total_Token \nFROM phonesample;\nQUIT;\n\nPROC SQL print; \nCreate table DistinctToken as\nSELECT count(distinct Token) AS distinct_Token \nFROM phonesample;\nQUIT;\n\nData Phonechecks;\nset TotalPhone; set DistinctPhones;\nrun;\n\nData Phonecheks1;\nSet Phonechecks;\n\nif Total_Phone = Distinct_Phone then Correct = "Correct";\nif Total_Phone ~= Distinct_Phone then Incorrect = "Incorrect";\nChecks="Unique Phone Check for Phone sample";\nrun;\n\nData Tokenchecks;\nset TotalToken; set DistinctToken;\nrun;\n\nData Tokencheks1;\nSet Tokenchecks;\n\nif Total_Token = Distinct_Token then Correct = "Correct";\nif Total_Token ~= Distinct_Token then Incorrect = "Incorrect";\nChecks="Unique Token Check for Phone sample";\nrun;\n\nData Mergecheck; \nset Modecheck Clustercheck emailcheck Phonecheks1 Tokencheks1;\nrun;\n\nProc format; \nValue $TFColor\n"Correct"=Green\n"Incorrect"=Red;\nrun;\n\nProc print data=Mergecheck;\ntitle "Status of all the checks required for Phone sample";\nVar Checks / style = {fontweight=bold};\nVar Correct / Style = {fontweight=bold Color=$TFColor.};\nVar Incorrect / Style = {fontweight=bold Color=$TFColor.}; \nrun;\n\n/* Checks for Text Sample*/\n\nproc sql;\ncreate table Modecheck as\nselect distinct Modef,'Mode check for Text sample' as Checks,\ncase\nwhen Modef = "3" then 'Correct'\nEnd as Correct, case\nwhen Modef NE "3" then 'Incorrect'\nEnd as Incorrect\nfrom textsample;\nquit;\n\nproc sql;\ncreate table Clustercheck as\nselect distinct Clusterf,'Cluster check for Text sample' as Checks,\ncase\nwhen Clusterf = "" then 'Correct'\nEnd as Correct, case\nwhen Clusterf NE "" then 'Incorrect'\nEnd as Incorrect\nfrom textsample;\nquit;\n\nproc sql;\ncreate table Emailcheck as\nselect distinct email,'Email check for Text sample' as Checks,\ncase\nwhen email = "rf@rf.com" then 'Correct'\nEnd as Correct, case\nwhen email NE "rf@rf.com" then 'Incorrect'\nEnd as Incorrect\nfrom textsample;\nquit;\n\nData textsample; Set textsample;\nToken_Check="Incorrect";\nif substr(Token,1,1)="T" then Token_Check="Correct";\nrun;\n\nproc sql;\ncreate table TokenCheck as\nselect distinct Token_Check, '"T" in token check for Text sample' as Checks,\ncase \nwhen Token_Check = "Correct" then "Correct"\nend as Correct, Case\nwhen Token_Check = "Incorrect" then "Incorrect"\nend as Incorrect\nfrom textsample;\nquit;\n\n/* Code to look at unique Phones in Phone/Token in Textsample*/\n\nPROC SQL print; \nCreate table TotalPhone as  \nSELECT count(phonef) AS Total_Phone \nFROM textsample;\nQUIT;\n\nPROC SQL print; \nCreate table DistinctPhones as\nSELECT count(distinct phone) AS distinct_Phone \nFROM textsample;\nQUIT;\n\nData Phonechecks1;\nset TotalPhone; set DistinctPhones;\nrun;\n\nData Phonecheks1;\nSet Phonechecks1;\n\nif Total_Phone = Distinct_Phone then Correct = "Correct";\nif Total_Phone ~= Distinct_Phone then Incorrect = "Incorrect";\nChecks="Unique Phone Check for Text sample";\nrun;\n\nPROC SQL print; \nCreate table TotalToken as  \nSELECT count(token) AS Total_Token \nFROM textsample;\nQUIT;\n\nPROC SQL print; \nCreate table DistinctToken as\nSELECT count(distinct Token) AS distinct_Token \nFROM textsample;\nQUIT;\n\nData Tokenchecks1;\nset TotalToken; set DistinctToken;\nrun;\n\nData Tokencheks1;\nSet Tokenchecks1;\n\nif Total_Token = Distinct_Token then Correct = "Correct";\nif Total_Token ~= Distinct_Token then Incorrect = "Incorrect";\nChecks="Unique Token Check for Text sample";\nrun;\n\nData Mergecheck; \nset Modecheck Clustercheck EmailCheck TokenCheck Tokencheks1 Phonecheks1;\nrun;\n\nProc format; \nValue $TFColor\n"Correct"=Green\n"Incorrect"=Red;\nrun;\n\nProc print data=Mergecheck;\ntitle "Status of all the checks required for Text sample";\nVar Checks / style = {fontweight=bold};\nVar Correct / Style = {fontweight=bold Color=$TFColor.};\nVar Incorrect / Style = {fontweight=bold Color=$TFColor.}; \nrun;`
        }
        
    },
    {
        id:"IMTPDI",
        info:{
            name: "IMT PDI",
            group: "client",
            id:"IMTPDI"
        },
        imports: {
            excel: `proc import datafile=filepath\nout=sample_import\ndbms=excel\nreplace;\ngetnames=Yes;\nsheet='Sheet 1';\nrun;`,
            csv:`proc import datafile=filepath\nout=sample_import\ndbms=csv\nreplace;\ngetnames=Yes;\nsheet='Sheet 1';\nrun;`,
            text: `proc import datafile=filepath\nout=sample_import\ndbms=text\nreplace;\ngetnames=Yes;\nsheet='Sheet 1';\nrun;`,
            dbf: `proc import datafile=filepath\nout=sample_import\ndbms=dbf\nreplace;\ngetnames=Yes;\nsheet='Sheet 1';\nrun;`,
            sav:`proc import datafile=filepath\nout=sample_import\ndbms=sav\nreplace;\ngetnames=Yes;\nsheet='Sheet 1';\nrun;`
        },
        flagging: {
            codes: {
                codeInitials:`data sample_processing;\nset sample_import;\n\n`,
                standardCodes:`firstname=First_Name;\nlastname=Last_Name;\n\nemail='rf@rf.com';\n\ntoken=compress(UID,'{}-',' ');\n\nphonef=Phone;\n\nphonetypef=Phone_Type;\n\nclusterf='';\n\ngenderf=3;\nif Gender ='M' then genderf=1;\nif Gender ='F' then genderf=2;\nif Gender ='U' then genderf=3;\n\nagef=7;\nIF 18<=AGE<=29 THEN agef=1;\nIF 30<=AGE<=40 THEN agef=2;\nIF 41<=AGE<=55 THEN agef=3;\nIF 56<=AGE<=65 THEN agef=4;\nIF 66<=AGE<=75 THEN agef=5;\nIF 76<=AGE<=200 THEN agef=6;\n\npartyf=2;\nif Party ='Republican' then partyf=1;\n\nethnicityf=6;\nif Race='White' then ethnicityf=1;\nif Race='Black' then ethnicityf=2;\nif Race='Hispanic' then ethnicityf=3;\nif Race='Asian' then ethnicityf=4;\nif Race='Other' then ethnicityf=5;\n\nmodef='';\nsampletype='';\nadditionalsample='';\n\nregionf=AREA_1;\n\nplaceholder1='';\nplaceholder2='';\nplaceholder3='';\n\n`,
                codeLasts:`run;`,
                
            },
            retain: {
                retainInitials:`data sample_processing;\nRetain`,
                standardVariables:`firstname lastname email token phonef phonetypef clusterf genderf agef partyf ethnicityf modef sampletype additionalsample regionf placeholder1 placeholder2 placeholder3`,
                retainLasts:`set sample_processing;\nrun;\n`,
            }
        },
        scrubbing: {
            filePath:`proc import datafile=filepath\nout=scrublist\ndbms=excel\nreplace;\ngetnames=Yes;\nsheet='Sheet1';\nmixed=Yes;\nscantext=Yes;\nrun;\n\n`,
            middle:`proc sort data=sample_processing \nout=sample_processing \nnodupkey \ndupout=tokendupsdeleted;\nby token;\nrun;\n \n\ndata sample_processing; set sample_processing;\n    full_nameKGS=upcase(compress(catx('', firstname, lastname)));\nrun;\n \n\nproc SQL;\n\ncreate table name as\nselect * from sample_processing where full_nameKGS not in (select fullname from scrublist);\n\ncreate table exactname as\nselect * from sample_processing where full_nameKGS in (select fullname from scrublist);\n\n\ncreate table name2 as \nselect * from name where trimn(cats(phonef)) not in (select trimn(cats(number)) from  scrublist);\n\ncreate table PhoneDNC as \nselect * from name where trimn(cats(phonef)) in (select trimn(cats(number)) from  scrublist);\n\ncreate table name3 as \nselect * from name2 where full_nameKGS not in (select dnc from  scrublist);\n\ncreate table DNCNAMES as \nselect * from name2 where full_nameKGS in (select dnc from  scrublist);\n\nquit;\n\n\ndata name4; set name3;\nlastname1=UPCASE(trimn(lastname));\nrun;\n\n`,
            names:`proc sql;\ncreate table name1 as\nselect * from name4 where lastname1 not in \n(namelist);\n\ncreate table Lastnameremoved as \nselect * from Name4 where lastname1 in \n(namelist);\nquit;\n\n`
        },
        splitting: {
            standard:{
                email:`* Standard Email Splitting Codes;\n\n`,
                phone:`Proc sort data=name1 \nout=Phone \nnodupkey \ndupout=drop_dupphone;\nby phonef;\n\ndata Phone; set Phone;\nModef=1;\nRandomKGS=ranuni(123456789);\nrun;\n \nproc sort data=Phone;\nby RandomKGS;\nrun;\n \n\ndata Phone; set Phone;\ndrop full_nameKGS RandomKGS lastname1;\nrun;\n\n`,
                text:`proc sort data=Phone(where=(phonetypef = 2)) \nout=text nodupkey dupout=drop_duptextphone;\nby phonef;\nrun;\n\ndata Text;\nLength firstname lastname email token $ 100;\nset Text;\nmodef=3;\ntoken=cats("T",token);\nRandomKGS=ranuni(123456789);\nrun;\n\nproc sort data=Text;\nby RandomKGS;\nrun;\n\n\ndata Text; set Text;\ndrop RandomKGS;\nrun;\n\n`,
                eToP:`* Standard Email to Phone Splitting Codes;\n\n`,
                pToT:`* Standard Phone to Text Splitting Codes;\n\n`
            },
            ssbased:{
                email:`* Sample Source Based Email Splitting Codes;\n\n`,
                phone:`* Sample Source Based Phone Splitting Codes;\n\n`,
                text:`* Sample Source Based Text Splitting Codes;\n\n`,
                eToP:`* Sample Source Based Email to Phone Splitting Codes;\n\n`,
                pToT:`* Sample Source Based Phone to Text Splitting Codes;\n\n`
            },
            splittingLasts:`proc sql;\nselect memname,nlobS\nfrom dictionary.tables\nwhere libname='WORK'\n and memname IN ("LASTNAMEREMOVED" , "EXACTNAME" , "DROP_DUPPHONE" , "DROP_DUPTEXTPHONE", "TOKENDUPSDELETED",\n"TOKENDUPS_FROM_ORIGINAL","PHONEDUPS_FROM_ORIGINAL","TOKENDUPS_FROM_ORIGINAL_TEXT","PHONEDUPS_FROM_ORIGINAL_TEXT","PHONEDNC","DNCNAMES");\nquit;\n\n`,
            exports: {
                email:`PROC EXPORT data=Email\noutfile="folderpath\Email Sample.csv"\ndbms=CSV;\nrun;\n\n`,
                phone:`PROC EXPORT data=Phone\noutfile="folderpath\Phone Sample.csv"\ndbms=CSV;\nrun;\n\n`,
                text:`PROC EXPORT data=Text\noutfile="folderpath\Text Sample.csv"\ndbms=CSV;\nrun;\n\n`,
                eToP:`PROC EXPORT data=EmailToPhone\noutfile="folderpath\EmailToPhone Sample.csv"\ndbms=CSV;\nrun;\n\n`,
                pToT:`PROC EXPORT data=PhoneToText\noutfile="folderpath\PhoneToText Sample.csv"\ndbms=CSV;\nrun;\n\n`,
            }
        },
        frequencies:{
            freqProcInitials:`ods CSV file="folderpath\sample frequencies.CSV";\n\n`,
            freqCodeInitials:`proc freq data=phone;\nTables `,
            freqCodeLasts:`\nrun;\n`,
            freqProcLasts:`ods CSV close;\n\n`,
        },
        trello:{
            trelloInitials:`proc sql;\ntitle 'Cell %';\nselect ROUND(count(phonetypef)/(select count(*)\nfrom phone\nwhere phonetypef <>3)*100) as Percent\nfrom phone\nwhere phonetypef=2;\n\n`,
            email:`create table emails as\nselect count(*) as Records, 'Email' as Sample, ROUND(count(*)/emailNsize) as Ratio\nfrom email;\n\n`,
            phone:`create table phones as\nselect count(*) as Records, 'Phone' as Sample, ROUND(count(*)/phoneNsize) as Ratio\nfrom phone;\n\n`,
            text:`create table texts as\nselect count(*) as Records, 'Text' as Sample, ROUND(count(*)/textNsize) as Ratio\nfrom text;\n\n`,
            eToP:`create table emailtophones as\nselect count(*) as Records, 'Email To Phone' as Sample, ROUND(count(*)/eToPNsize) as Ratio\nfrom emailtophone;\n\n`,
            pToT:`create table phonetotexts as\nselect count(*) as Records, 'Phone To Text' as Sample, ROUND(count(*)/pToTNsize) as Ratio\nfrom phonetotext;\n\n`,
            trelloMiddle:`data SampleRecords;\nset `,
            trelloLasts: `;\nrun;\n\nproc print data=SampleRecords;\ntitle "Sample Records";\n    Var Sample /style={fontweight=bold};\n    Var Records;\n    Var Ratio;\nrun;\n\n`,
            language:`proc format ;\nvalue lan 1='English' \n2='Spanish';\n\nvalue eth 1='White' \n2='Black' \n3='Hispanic' \n4='Asian'\n5='Other';\nrun;\n\nproc freq data=phone(rename=(languagef='Language'n)) ;\ntitle 'Language Records';\nTable 'Language'n/nocum;\nformat 'Language'n lan. ;\nrun;\n\nproc freq data=phone(rename=(ethnicityf='Ethnicity'n)) ;\ntitle 'Ethnicity Records';\nTable 'Ethnicity'n/nocum;\nformat 'Ethnicity'n eth. ;\nrun;\n\n`,
            os:`proc sql;\ncreate table overall as\nselect count(*) as Records, 'Overall' as Sample, ROUND(count(*)/Nsize) as Ratio\nfrom phone;\n\nproc sql;\ncreate table base as\nselect count(*) as Records, 'Base' as Sample, ROUND(count(*)/Nsizebase) as Ratio\nfrom phone\nwhere sampletype=1;\n\nproc sql;\ncreate table os as\nselect count(*) as Records, 'OS' as Sample, ROUND(count(*)/Nsizeos) as Ratio\nfrom phone\nwhere sampletype=2;\n\ndata Sampletype_Records;\nset overall base os;\n\nproc print data=Sampletype_Records;\ntitle "Sampletype Records";\nVar Sample /style={fontweight=bold};\nVar Records;\nVar Ratio;\nrun;\n\n/* Counts per sample */\n\nproc sql;\ncreate table phoneB as\nselect count(*) as Records, 'PhoneBase' as Sample\nfrom phone\nwhere sampletype=1;\n\nproc sql;\ncreate table textB as\nselect count(*) as Records, 'TextBase' as Sample\nfrom text\nwhere sampletype=1;\n\nproc sql;\ncreate table phoneOS as\nselect count(*) as Records, 'PhoneOS' as Sample\nfrom phone\nwhere sampletype=2;\n\nproc sql;\ncreate table textOS as\nselect count(*) as Records, 'TextOS' as Sample\nfrom text\nwhere sampletype=2;\n\ndata SampleRecords;\nset phoneB textB phoneOS textOS;\n\nproc print data=SampleRecords;\ntitle "Sample Records";\nVar Sample /style={fontweight=bold};\nVar Records;\nrun;\n\n`
        },
        checking:{
            preFlagCheck:`data phonesample; set phone;\ndata textsample; set text;\n\ndata phonesample; \nset phonesample;\nPhoneflag="Incorrect";\nif phonef = phone then Phoneflag="Correct";\n\nproc sql;\ncreate table PhoneFlagcheck as\nselect distinct Phoneflag,'Phone flag check for Phone sample' as Checks,\ncase\nwhen Phoneflag = "Correct" then 'Correct'\nEnd as Correct, case\nwhen Phoneflag = "Incorrect" then 'Incorrect'\nEnd as Incorrect\nfrom phonesample;\nquit;\n\nProc format; \nValue $TFColor\n"Correct"=Green\n"Incorrect"=Red;\nrun;\n\nProc print data=PhoneFlagCheck;\nVar Phoneflag / style = {fontweight=bold Color=$TFColor.};\nrun;\n\n`,
            postFlagCheck:`proc sql;\n\ntitle 'Phonetype Flag';\nselect distinct(Phone_Type),phonetypef from phonesample\ngroup by Phone_Type, phonetypef\nORDER BY phonetypef;\n\ntitle 'Gender Flag';\nselect distinct(Gender),genderf from phonesample\ngroup by Gender, genderf\nORDER BY genderf;\n\ntitle 'Age Flag';\nselect distinct agef,\nmin(Age) as Min_Age,\nmax(Age) as max_Age\nfrom phonesample\ngroup by agef;\n\ntitle 'Party flag';\nselect distinct(party),partyf from phonesample\ngroup by party, partyf\nORDER BY partyf;\n\ntitle 'Ethnicity flag';\nselect distinct(Race),ethnicityf from phonesample\ngroup by Race, ethnicityf\nORDER BY ethnicityf;\n\ntitle 'Region Flag';\nselect distinct(Area),regionf from phonesample\ngroup by Area, regionf\nORDER BY regionf;\n\nquit;\n\n/* Headers Checking codes*/\n\nproc contents Data=phonesample Noprint Out= OG_Variablename VARNUM;\nrun;\n\nProc sort data= OG_Variablename out=Variablecheck (Keep= NAME VARNUM);\nby VARNUM;\nwhere VARNUM <= 18;\nrun;\n\ndata headers;\ninput @1 Precodes $ 1-16 @17  VARNUM;\ndatalines;\nfirstname        1\nlastname         2\nemail            3\ntoken            4\nphonef           5\nphonetypef       6\nClusterF         7\ngenderf          8\nagef             9\npartyf           10\nethnicityf       11\nmodef            12\nsampletype       13\nadditionalsample 14\nregionf    	 	 15\nplaceholder1 	 16\nplaceholder2 	 17\nplaceholder3	 18\n;\nrun;\n\nData Headerscheck; \nMerge Headers Variablecheck;\nby VARNUM;\nrun;\n\nData Finalheadercheck; \nset Headerscheck;\nVariable_name_check="Incorrect";\nif Precodes=Name then Variable_name_check="Correct";\n\nProc format; \nValue $TFColor\n"Correct"=Green\n"Incorrect"=Red;\nrun;\n\nProc print data=Finalheadercheck;\ntitle "Please check if flag orders align";\nVar Precodes VARNUM Name;\nVar Variable_name_check / style = {fontweight=bold Color=$TFColor.};\nrun;\n\n/* Checks for Phone sample*/\n\nproc sql;\ncreate table Modecheck as\nselect distinct Modef,'Mode check for Phone sample' as Checks,\ncase\nwhen Modef = "1" then 'Correct'\nEnd as Correct, case\nwhen Modef NE "1" then 'Incorrect'\nEnd as Incorrect\nfrom phonesample;\nquit;\n\nproc sql;\ncreate table Clustercheck as\nselect distinct Clusterf,'Cluster check for Phone sample' as Checks,\ncase\nwhen Clusterf = "" then 'Correct'\nEnd as Correct, case\nwhen Clusterf NE "" then 'Incorrect'\nEnd as Incorrect\nfrom phonesample;\nquit;\n\nproc sql;\ncreate table Emailcheck as\nselect distinct email,'Email check for Phone sample' as Checks,\ncase\nwhen email = "rf@rf.com" then 'Correct'\nEnd as Correct, case\nwhen email NE "rf@rf.com" then 'Incorrect'\nEnd as Incorrect\nfrom phonesample;\nquit;\n\n/* Code to look at unique Phones in sample*/\n\nPROC SQL print; \nCreate table TotalPhone as  \nSELECT count(phonef) AS Total_Phone \nFROM phonesample;\nQUIT;\n\nPROC SQL print; \nCreate table DistinctPhones as\nSELECT count(distinct phone) AS distinct_Phone \nFROM phonesample;\nQUIT;\n\nPROC SQL print; \nCreate table TotalToken as  \nSELECT count(Token) AS Total_Token \nFROM phonesample;\nQUIT;\n\nPROC SQL print; \nCreate table DistinctToken as\nSELECT count(distinct Token) AS distinct_Token \nFROM phonesample;\nQUIT;\n\nData Phonechecks;\nset TotalPhone; set DistinctPhones;\nrun;\n\nData Phonecheks1;\nSet Phonechecks;\n\nif Total_Phone = Distinct_Phone then Correct = "Correct";\nif Total_Phone ~= Distinct_Phone then Incorrect = "Incorrect";\nChecks="Unique Phone Check for Phone sample";\nrun;\n\nData Tokenchecks;\nset TotalToken; set DistinctToken;\nrun;\n\nData Tokencheks1;\nSet Tokenchecks;\n\nif Total_Token = Distinct_Token then Correct = "Correct";\nif Total_Token ~= Distinct_Token then Incorrect = "Incorrect";\nChecks="Unique Token Check for Phone sample";\nrun;\n\nData Mergecheck; \nset Modecheck Clustercheck emailcheck Phonecheks1 Tokencheks1;\nrun;\n\nProc format; \nValue $TFColor\n"Correct"=Green\n"Incorrect"=Red;\nrun;\n\nProc print data=Mergecheck;\ntitle "Status of all the checks required for Phone sample";\nVar Checks / style = {fontweight=bold};\nVar Correct / Style = {fontweight=bold Color=$TFColor.};\nVar Incorrect / Style = {fontweight=bold Color=$TFColor.}; \nrun;\n\n/* Checks for Text Sample*/\n\nproc sql;\ncreate table Modecheck as\nselect distinct Modef,'Mode check for Text sample' as Checks,\ncase\nwhen Modef = "3" then 'Correct'\nEnd as Correct, case\nwhen Modef NE "3" then 'Incorrect'\nEnd as Incorrect\nfrom textsample;\nquit;\n\nproc sql;\ncreate table Clustercheck as\nselect distinct Clusterf,'Cluster check for Text sample' as Checks,\ncase\nwhen Clusterf = "" then 'Correct'\nEnd as Correct, case\nwhen Clusterf NE "" then 'Incorrect'\nEnd as Incorrect\nfrom textsample;\nquit;\n\nproc sql;\ncreate table Emailcheck as\nselect distinct email,'Email check for Text sample' as Checks,\ncase\nwhen email = "rf@rf.com" then 'Correct'\nEnd as Correct, case\nwhen email NE "rf@rf.com" then 'Incorrect'\nEnd as Incorrect\nfrom textsample;\nquit;\n\nData textsample; Set textsample;\nToken_Check="Incorrect";\nif substr(Token,1,1)="T" then Token_Check="Correct";\nrun;\n\nproc sql;\ncreate table TokenCheck as\nselect distinct Token_Check, '"T" in token check for Text sample' as Checks,\ncase \nwhen Token_Check = "Correct" then "Correct"\nend as Correct, Case\nwhen Token_Check = "Incorrect" then "Incorrect"\nend as Incorrect\nfrom textsample;\nquit;\n\n/* Code to look at unique Phones in Phone/Token in Textsample*/\n\nPROC SQL print; \nCreate table TotalPhone as  \nSELECT count(phonef) AS Total_Phone \nFROM textsample;\nQUIT;\n\nPROC SQL print; \nCreate table DistinctPhones as\nSELECT count(distinct phone) AS distinct_Phone \nFROM textsample;\nQUIT;\n\nData Phonechecks1;\nset TotalPhone; set DistinctPhones;\nrun;\n\nData Phonecheks1;\nSet Phonechecks1;\n\nif Total_Phone = Distinct_Phone then Correct = "Correct";\nif Total_Phone ~= Distinct_Phone then Incorrect = "Incorrect";\nChecks="Unique Phone Check for Text sample";\nrun;\n\nPROC SQL print; \nCreate table TotalToken as  \nSELECT count(token) AS Total_Token \nFROM textsample;\nQUIT;\n\nPROC SQL print; \nCreate table DistinctToken as\nSELECT count(distinct Token) AS distinct_Token \nFROM textsample;\nQUIT;\n\nData Tokenchecks1;\nset TotalToken; set DistinctToken;\nrun;\n\nData Tokencheks1;\nSet Tokenchecks1;\n\nif Total_Token = Distinct_Token then Correct = "Correct";\nif Total_Token ~= Distinct_Token then Incorrect = "Incorrect";\nChecks="Unique Token Check for Text sample";\nrun;\n\nData Mergecheck; \nset Modecheck Clustercheck EmailCheck TokenCheck Tokencheks1 Phonecheks1;\nrun;\n\nProc format; \nValue $TFColor\n"Correct"=Green\n"Incorrect"=Red;\nrun;\n\nProc print data=Mergecheck;\ntitle "Status of all the checks required for Text sample";\nVar Checks / style = {fontweight=bold};\nVar Correct / Style = {fontweight=bold Color=$TFColor.};\nVar Incorrect / Style = {fontweight=bold Color=$TFColor.}; \nrun;`
        }
        
    }
]

export default db;
